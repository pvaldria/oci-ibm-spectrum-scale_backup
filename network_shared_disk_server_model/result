[0m[1mnull_resource.install_oci_cli_preview[0]: Refreshing state... [id=6542413639753635011][0m
[0m[1mdata.template_file.mgmt_gui_boot_script: Refreshing state...[0m
[0m[1moci_core_virtual_network.gpfs: Refreshing state... [id=ocid1.vcn.oc1.phx.aaaaaaaa6ws4cf2oc7f5yp5hqb333co33mpxv2wzim2ddk5gckgmralvgzla][0m
[0m[1mdata.oci_identity_availability_domains.ADs: Refreshing state...[0m
[0m[1moci_core_internet_gateway.internet_gateway: Refreshing state... [id=ocid1.internetgateway.oc1.phx.aaaaaaaarnhnczl5f4lbkai3xkwnqqs3s7a3luyu5bx4vw5evb57ohivixta][0m
[0m[1moci_core_nat_gateway.nat_gateway: Refreshing state... [id=ocid1.natgateway.oc1.phx.aaaaaaaaq66opzmy7zbmbzxw2esaoac5npsdjlfln2xmbx5qqerpskqwkswq][0m
[0m[1moci_core_security_list.public_security_list: Refreshing state... [id=ocid1.securitylist.oc1.phx.aaaaaaaaeexpgtm7fcgqpd3v4vtz45r33lg6l34htgs7gmo2wrpdjl3wktwq][0m
[0m[1moci_core_security_list.private_security_list: Refreshing state... [id=ocid1.securitylist.oc1.phx.aaaaaaaa2itrty7dvlalsatzg7bht6o3mylnjo44c7xlscghrxd53qhbp6jq][0m
[0m[1moci_core_volume.shared_data_block_volume[23]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljttdvf2fjxrvvvd3cpxbp2oixafj7vqb57jr23q77gk5b5fam5wkca][0m
[0m[1moci_core_volume.shared_data_block_volume[32]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtm3zidptqlrdkyrgbr3gi6y3k5pkvlqyp27lgriibsgwhd3ksqhja][0m
[0m[1moci_core_volume.shared_data_block_volume[40]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtur35xfp5cel343wrid6bsivbzyjvqfnoq3grknhhzychauahrxsq][0m
[0m[1moci_core_volume.shared_data_block_volume[2]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljti7hcqchejkfcr7j3wtx2j7vc2cmydxmdtstcse6tnizdmqkqlk3q][0m
[0m[1moci_core_volume.shared_data_block_volume[11]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtf7xenv2333tfgkvmnx6ucknx3cj5e3qti35xgiwbbyn3y5cfywyq][0m
[0m[1moci_core_volume.shared_data_block_volume[22]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtyrus5dzr3wbnc2fr33ms3xnpihme236qtjwdnzbqnaznotsc7zja][0m
[0m[1moci_core_volume.shared_data_block_volume[3]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtywmtw7j4hujxzl4ympwdw5jf4aoqeksffyajwif4bsu2doyqyawq][0m
[0m[1moci_core_volume.shared_data_block_volume[21]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljti3hingh3u2x5hvwtymcl5gikl4nrjsvjax5fjf2wpbwn2tmrgojq][0m
[0m[1moci_core_volume.shared_data_block_volume[41]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtcgrhltkiakcktckydv6yvta2ha6fac3oyb3qiyprpmcwry7sz4xa][0m
[0m[1moci_core_volume.shared_data_block_volume[4]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt7c6xpxyrrsqjlooixi4aat3oubkovqww7frtbhxa3dxj5q3poruq][0m
[0m[1moci_core_volume.shared_data_block_volume[9]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt4au6egwysi4hiwz63vg64h2gd5zyi2nf7u3degyvdbfg5dtpmisq][0m
[0m[1moci_core_volume.shared_data_block_volume[43]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt5efigzw5zsnn5vituhno4tqtclqjyiokfjzpc2w26obqfrj3ie3a][0m
[0m[1moci_core_volume.shared_data_block_volume[39]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt3v4bnedz7cc53rod7xhyxugxnuvhxjwpy66eaxawladqhedbtexa][0m
[0m[1moci_core_volume.shared_data_block_volume[14]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtaywm5vquzp5iwvhzfpg7hqi7s545iqygt7gguxsljbcmllshwica][0m
[0m[1moci_core_volume.shared_data_block_volume[29]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtvoufhgoh35nmh3vfjhixywjelww72y66cl6f5ii6os7uqecbeifq][0m
[0m[1moci_core_volume.shared_data_block_volume[5]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtznbojh3tsanndpclt5ur7tb5kn2zanbivndgksibmnx5wthxbssa][0m
[0m[1moci_core_volume.shared_data_block_volume[37]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljteintmejbsdstrtionkuyiqjmww2gpuctjd2njfnqoxknw46od2yq][0m
[0m[1moci_core_volume.shared_data_block_volume[30]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtt5z5qja75j3245v7wktin2ohexoj7upsu2sbj4ujq473j74kdtva][0m
[0m[1moci_core_volume.shared_data_block_volume[19]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtvx7nr36fzyfhsjujuxjm2xk6vvsw6zffp3s44x7bkqnbv5aoanda][0m
[0m[1moci_core_volume.shared_data_block_volume[12]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt72viotwctw4fw2zj5bn3tbhdnepibanehcwc3e5hvprgnbtxit2q][0m
[0m[1moci_core_volume.shared_data_block_volume[34]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtpa3vg2iqlmawajs5umhoebptgb2g6dfcuyuhrj33d2i3gxxb4rta][0m
[0m[1moci_core_volume.shared_data_block_volume[15]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtq6iy7rj6jx2zuh3i3stxbecmv3g7nctplxsi27bohiqa7tyzyewq][0m
[0m[1moci_core_volume.shared_data_block_volume[17]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt27int4p4c7rekw63qzmdt3v57xeid3ldkegdvpxd4sy4is5jj6fq][0m
[0m[1moci_core_volume.shared_data_block_volume[6]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtuau5wubbqivzag2juncaqccxekzajjzi2gpunbij7xy577miigwa][0m
[0m[1moci_core_volume.shared_data_block_volume[35]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtpcknw3hul42rjjyiyu2nrknby2o2j24nc6elq67ubwmj6l5erb7q][0m
[0m[1moci_core_volume.shared_data_block_volume[10]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt5jf7apk77lto7ufoc4upp42m35yayfcgvycm3kym7rsvzmvybbdq][0m
[0m[1moci_core_volume.shared_data_block_volume[8]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt7hfkxnfmdsau7wyy2545b5nel6bfvg3xeplzdmrmlgigrsyfv4ja][0m
[0m[1moci_core_volume.shared_data_block_volume[16]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt3x5d5k5e32dfamlojccvfmydjqsxiq4vir2kksbr4oi456cmw34a][0m
[0m[1moci_core_volume.shared_data_block_volume[36]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtxntuwu7hnfnxefygakbxilu6wpmuuh5kcijb5pfnzdgiirazy7oq][0m
[0m[1moci_core_volume.shared_data_block_volume[27]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljthwcnnnlvm365gt7yj2mubg4e7imeydb7lrxwrgjl2kjf36zrilva][0m
[0m[1moci_core_volume.shared_data_block_volume[20]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt34mdz5yc7hwlffrzmpsqedsrcyc5c436lk5vu6b5oig35udpa36a][0m
[0m[1moci_core_volume.shared_data_block_volume[13]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtw4trdn7bylj2gjfnnomn23jlnulbbuatsq5vh7zeeecj6gxow6ra][0m
[0m[1moci_core_volume.shared_data_block_volume[38]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtppbr354k6s62n4cf2rvxmrlkoasjszp5qtgxn4hyre2moyakhl4q][0m
[0m[1moci_core_volume.shared_data_block_volume[25]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtyarpvzuurgopvx35edpeslnzuyvntqrwrhhw7e2c6dhxtuuegrwq][0m
[0m[1moci_core_volume.shared_data_block_volume[0]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt7lxjmeui3oidrahg2dgipka6z7b4sujuui37jfzkkzcqp6pmdj7q][0m
[0m[1moci_core_volume.shared_data_block_volume[24]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtr6oxpiflr22fqga57tiwbalndsr7j6swxn6oxy2elhzema3cifta][0m
[0m[1moci_core_volume.shared_data_block_volume[26]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljt6yfk46spbqzzcyvbscfi5i7wbo4zngcxc3z3xuzhsixuie36pg3a][0m
[0m[1moci_core_volume.shared_data_block_volume[28]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljta6sf3xnkxoptite7d4kn3ehg2ft4cac4yh3hmh2jhdudvkkcp3va][0m
[0m[1moci_core_volume.shared_data_block_volume[18]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtw3ehqobmywjlrnacuffsaeu7opbdkdmi5zr544muzuurtt6pitzq][0m
[0m[1moci_core_volume.shared_data_block_volume[31]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtxi6paynsj4676tdkh6uzv3vln7vp4hzkaxbairpxpyves5vee62a][0m
[0m[1moci_core_volume.shared_data_block_volume[1]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtpqjenfowoccym6lm666fzxrkqdfpon3jfvkzehp4hsdyhy47ghsq][0m
[0m[1moci_core_volume.shared_data_block_volume[33]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtzd46bzherdb5w42qooun3sv43r4aktrhxjkgoggyxxv3xtgm3lga][0m
[0m[1moci_core_volume.shared_data_block_volume[42]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljttpv24fcf2ip3hyylsuadqt4dqpv25aflt2zdmi3hvza5rs2zsq7q][0m
[0m[1moci_core_volume.shared_data_block_volume[7]: Refreshing state... [id=ocid1.volume.oc1.phx.abyhqljtbei6g4ec2yn7bf6gth2mtibz7tc4v3ts2ssnhh54o4mcx3k3rsbq][0m
[0m[1moci_core_route_table.pubic_route_table: Refreshing state... [id=ocid1.routetable.oc1.phx.aaaaaaaapqlwo2k6eqytdigiziw32ifrb4u625ktgk3rf7aiq3oiu6jmpq2q][0m
[0m[1moci_core_route_table.private_route_table: Refreshing state... [id=ocid1.routetable.oc1.phx.aaaaaaaa24qiindjtqkneh3cwozbu2st4n27bdbddyzjzpmpe4sdwieaig7a][0m
[0m[1moci_core_subnet.public[0]: Refreshing state... [id=ocid1.subnet.oc1.phx.aaaaaaaabz5g2skq47zilmvz3kqg7fd3lgrlblaccvnd7ormxzqkustj4zzq][0m
[0m[1moci_core_subnet.privateb[0]: Refreshing state... [id=ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q][0m
[0m[1moci_core_subnet.private[0]: Refreshing state... [id=ocid1.subnet.oc1.phx.aaaaaaaaijglqbq2fhov5mdtkzupzha6agv3unoayq6rwsn3pezaqcll6hoq][0m
[0m[1moci_core_instance.bastion[0]: Refreshing state... [id=ocid1.instance.oc1.phx.abyhqljtroryi5kjdorfq6xgv237zmxwuanh73ry7pliaznftfo3ocr75nda][0m
[0m[1moci_core_instance.nsd_node[3]: Refreshing state... [id=ocid1.instance.oc1.phx.abyhqljtvkytwjrxgws3hgkq2yb2ybaoiwsnmopw2zys62n42vcxnibupnva][0m
[0m[1moci_core_instance.nsd_node[1]: Refreshing state... [id=ocid1.instance.oc1.phx.abyhqljtkvqhtcd2qyx6mrdsv3jqkoxdzpyo53b7upqpfd7ywbudr7jg72na][0m
[0m[1moci_core_instance.nsd_node[2]: Refreshing state... [id=ocid1.instance.oc1.phx.abyhqljtgjug2374vw2tqk3gymi5bxo6tcu34ibtdg3soizikt6wv7d3uwmq][0m
[0m[1moci_core_instance.client_node[1]: Refreshing state... [id=ocid1.instance.oc1.phx.abyhqljt7fcmitetnodviz7gdyjwaquenmrwicu2pbamb5kuxe6mfk2v4gbq][0m
[0m[1moci_core_instance.nsd_node[0]: Refreshing state... [id=ocid1.instance.oc1.phx.abyhqljtilwqmibvupgziq2lmlwpg2igq3pd3t44d7z5lmrx77wx55ttpgqq][0m
[0m[1moci_core_instance.client_node[0]: Refreshing state... [id=ocid1.instance.oc1.phx.abyhqljtzkcotdrvh7ovqvh7xlc7megpew7yt54bsd3i3cedc5kfnopr3fqq][0m
[0m[1moci_core_instance.client_node[3]: Refreshing state... [id=ocid1.instance.oc1.phx.abyhqljtfti4lgav5ncigrdn545jmsxvzthlownb2marzzrl2fo2k5t2kktq][0m
[0m[1moci_core_instance.client_node[2]: Refreshing state... [id=ocid1.instance.oc1.phx.abyhqljtg5uu6qmx57cqjzacwg53e4rrj2piwehyyd3p4vnpj2nmfzh2hszq][0m
[0m[1mnull_resource.copy_nsddevices_to_all_server_nodes[1]: Refreshing state... [id=3650311363779251080][0m
[0m[1mnull_resource.copy_nsddevices_to_all_server_nodes[3]: Refreshing state... [id=2474645460913870034][0m
[0m[1mnull_resource.copy_nsddevices_to_all_server_nodes[2]: Refreshing state... [id=536176437583257283][0m
[0m[1mnull_resource.copy_nsddevices_to_all_server_nodes[0]: Refreshing state... [id=7435778602764829225][0m
[0m[1moci_core_vnic_attachment.secondary_vnic_attachment[0]: Refreshing state... [id=ocid1.vnicattachment.oc1.phx.abyhqljt65vz3mo33cemphkf4idasjvclskk5l55osnbxk6hz2kpccm2axka][0m
[0m[1moci_core_vnic_attachment.secondary_vnic_attachment[2]: Refreshing state... [id=ocid1.vnicattachment.oc1.phx.abyhqljtmtfqr77swt32dkw2jqbnxkgtygiia4xja65epkdxomo7zb5vud7q][0m
[0m[1moci_core_vnic_attachment.secondary_vnic_attachment[1]: Refreshing state... [id=ocid1.vnicattachment.oc1.phx.abyhqljtvrvz4pgg3jyfx42yy3xjjshustwslfc23xmfjytd2uaitp7fexla][0m
[0m[1moci_core_vnic_attachment.secondary_vnic_attachment[3]: Refreshing state... [id=ocid1.vnicattachment.oc1.phx.abyhqljtktiz3iwrciluk4qkan3mg6ihqi2hoiidutfljorjufkbqllmqtfq][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[41]: Refreshing state... [id=8191642084858893775][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[42]: Refreshing state... [id=5788845469836278006][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[29]: Refreshing state... [id=1153148932933502964][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[27]: Refreshing state... [id=6350056667937339682][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[47]: Refreshing state... [id=5866721011627363508][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[83]: Refreshing state... [id=7315653311930846001][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[68]: Refreshing state... [id=1076002448475785057][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[36]: Refreshing state... [id=2301544930196061785][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[81]: Refreshing state... [id=3057586696748576315][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[75]: Refreshing state... [id=4247866228780650037][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[86]: Refreshing state... [id=8509649798192470418][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[3]: Refreshing state... [id=3935711175334740255][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[55]: Refreshing state... [id=3101657235013259703][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[5]: Refreshing state... [id=3955943662838408288][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[4]: Refreshing state... [id=7067949676980119095][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[14]: Refreshing state... [id=487197373192549305][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[54]: Refreshing state... [id=5662392056352724463][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[80]: Refreshing state... [id=7470767042713193036][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[43]: Refreshing state... [id=4454821610769099213][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[56]: Refreshing state... [id=5914222735490314690][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[73]: Refreshing state... [id=8374829083890000246][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[21]: Refreshing state... [id=1965624002366422545][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[2]: Refreshing state... [id=1407177687864829109][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[74]: Refreshing state... [id=4319507304616257673][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[24]: Refreshing state... [id=1449119509199095987][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[40]: Refreshing state... [id=2528783133865721573][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[71]: Refreshing state... [id=933203047376725158][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[25]: Refreshing state... [id=3565890633122149188][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[18]: Refreshing state... [id=8577406981386325005][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[66]: Refreshing state... [id=1888123381214966740][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[13]: Refreshing state... [id=1092459545884861754][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[48]: Refreshing state... [id=1920777200832401390][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[1]: Refreshing state... [id=4084169491497234018][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[34]: Refreshing state... [id=4867798767655993680][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[70]: Refreshing state... [id=6560362883720158644][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[82]: Refreshing state... [id=2880309569241309954][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[44]: Refreshing state... [id=4902331530541924910][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[7]: Refreshing state... [id=8504537749215394117][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[69]: Refreshing state... [id=4765470903610299499][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[19]: Refreshing state... [id=3120225551404942591][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[33]: Refreshing state... [id=8108746721679168639][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[0]: Refreshing state... [id=8498829566931974111][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[22]: Refreshing state... [id=6346204097052682874][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[49]: Refreshing state... [id=5196899660425826805][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[60]: Refreshing state... [id=4131350234783310157][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[8]: Refreshing state... [id=5745677863155835237][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[58]: Refreshing state... [id=4334999075594628504][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[28]: Refreshing state... [id=9075976153004655488][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[46]: Refreshing state... [id=683014556863373668][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[77]: Refreshing state... [id=9167742320610925838][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[67]: Refreshing state... [id=6951429816566680712][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[11]: Refreshing state... [id=6307134027569581554][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[10]: Refreshing state... [id=3304048572401287525][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[53]: Refreshing state... [id=7979496181059114360][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[30]: Refreshing state... [id=556705579341907709][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[84]: Refreshing state... [id=8898944379244825347][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[78]: Refreshing state... [id=8521110229500359389][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[23]: Refreshing state... [id=2865634080580874416][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[52]: Refreshing state... [id=4202003942203861976][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[31]: Refreshing state... [id=8346340406852211971][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[50]: Refreshing state... [id=4118517149471177098][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[39]: Refreshing state... [id=36436799724579033][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[26]: Refreshing state... [id=3843644051211603160][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[87]: Refreshing state... [id=4995361719737443681][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[12]: Refreshing state... [id=5150500797865013874][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[62]: Refreshing state... [id=3174541070265941773][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[51]: Refreshing state... [id=2940698349279211076][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[16]: Refreshing state... [id=4167709965054966075][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[6]: Refreshing state... [id=2563130694449117171][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[37]: Refreshing state... [id=2351286627919624656][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[63]: Refreshing state... [id=8584752984916503103][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[85]: Refreshing state... [id=3818587435077362517][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[64]: Refreshing state... [id=6178128729720106457][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[35]: Refreshing state... [id=7287889721268469629][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[59]: Refreshing state... [id=9201586976430791575][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[38]: Refreshing state... [id=8023555504744753505][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[72]: Refreshing state... [id=5902875351538209712][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[15]: Refreshing state... [id=8414864580606123480][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[61]: Refreshing state... [id=485511101916959574][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[57]: Refreshing state... [id=3981526015994215463][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[76]: Refreshing state... [id=999368874595010247][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[9]: Refreshing state... [id=9091670957847965649][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[17]: Refreshing state... [id=8219258921406756769][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[32]: Refreshing state... [id=4774167351907679337][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[79]: Refreshing state... [id=5541495639530027991][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[20]: Refreshing state... [id=7204937207594068980][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[65]: Refreshing state... [id=3604467403034842359][0m
[0m[1mnull_resource.multi_attach_shared_data_bv_to_nsd_nodes[45]: Refreshing state... [id=4471746757667341584][0m
[0m[1mnull_resource.notify_server_nodes_oci_cli_multi_attach_complete[0]: Refreshing state... [id=7816843242953657533][0m
[0m[1mnull_resource.notify_server_nodes_oci_cli_multi_attach_complete[2]: Refreshing state... [id=4870752701889824018][0m
[0m[1mnull_resource.notify_server_nodes_oci_cli_multi_attach_complete[3]: Refreshing state... [id=5454040844163139650][0m
[0m[1mnull_resource.notify_server_nodes_oci_cli_multi_attach_complete[1]: Refreshing state... [id=7636739223005599478][0m
[0m[1mnull_resource.deploy_gpfs_on_client_nodes[3]: Refreshing state... [id=7188078283376747844][0m
[0m[1mnull_resource.deploy_gpfs_on_client_nodes[1]: Refreshing state... [id=307238302819677690][0m
[0m[1mnull_resource.deploy_gpfs_on_client_nodes[2]: Refreshing state... [id=7775865245767949553][0m
[0m[1mnull_resource.deploy_gpfs_on_nsd_server_nodes[2]: Refreshing state... [id=1818458470550261055][0m
[0m[1mnull_resource.deploy_gpfs_on_client_nodes[0]: Refreshing state... [id=4828968364321965367][0m
[0m[1mnull_resource.deploy_gpfs_on_nsd_server_nodes[3]: Refreshing state... [id=4516709134100609239][0m
[0m[1mnull_resource.deploy_gpfs_on_nsd_server_nodes[1]: Refreshing state... [id=9185398894228208210][0m
[0m[1mnull_resource.deploy_gpfs_on_nsd_server_nodes[0]: Refreshing state... [id=14325723454404680][0m
Interrupt received.
Please wait for Terraform to exit or data loss may occur.
Gracefully shutting down...

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  [32m+[0m create
  [33m~[0m update in-place
[31m-[0m/[32m+[0m destroy and then create replacement
[0m
Terraform will perform the following actions:

[1m  # null_resource.create_gpfs_cluster[0][0m will be created[0m[0m
[0m[32m  +[0m [0mresource "null_resource" "create_gpfs_cluster" {
      [32m+[0m [0m[1m[0mid[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mtriggers[0m[0m = {
          [32m+[0m [0m"instance_ids" = "oci_core_instance.nsd_node.*.id"
        }
    }

[1m  # null_resource.deploy_gpfs_on_nsd_server_nodes[0][0m is tainted, so must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "null_resource" "deploy_gpfs_on_nsd_server_nodes" {
      [33m~[0m [0m[1m[0mid[0m[0m       = "14325723454404680" [33m->[0m [0m(known after apply)
        [1m[0mtriggers[0m[0m = {
            "instance_ids" = "oci_core_instance.nsd_node.*.id"
        }
    }

[1m  # oci_core_instance.client_node[0][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_instance" "client_node" {
        [1m[0mavailability_domain[0m[0m                 = "vemA:PHX-AD-3"
      [33m~[0m [0m[1m[0mboot_volume_id[0m[0m                      = "ocid1.bootvolume.oc1.phx.abyhqljthjbid6jl6xv7vw4mnyse23xu7yq4hdap2qml76rru6htxeizqi7q" [33m->[0m [0m(known after apply)
        [1m[0mcompartment_id[0m[0m                      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
      [33m~[0m [0m[1m[0mdefined_tags[0m[0m                        = {} [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m                        = "ss-compute-1"
      [33m~[0m [0m[1m[0mfault_domain[0m[0m                        = "FAULT-DOMAIN-3" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mfreeform_tags[0m[0m                       = {} [33m->[0m [0m(known after apply)
        [1m[0mhostname_label[0m[0m                      = "ss-compute-1"
      [33m~[0m [0m[1m[0mid[0m[0m                                  = "ocid1.instance.oc1.phx.abyhqljtzkcotdrvh7ovqvh7xlc7megpew7yt54bsd3i3cedc5kfnopr3fqq" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mimage[0m[0m                               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mipxe_script[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mis_pv_encryption_in_transit_enabled[0m[0m = (known after apply)
      [33m~[0m [0m[1m[0mlaunch_mode[0m[0m                         = "NATIVE" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mlaunch_options[0m[0m                      = [
          [31m-[0m [0m{
              [31m-[0m [0mboot_volume_type                    = "PARAVIRTUALIZED"
              [31m-[0m [0mfirmware                            = "UEFI_64"
              [31m-[0m [0mis_consistent_volume_naming_enabled = true
              [31m-[0m [0mis_pv_encryption_in_transit_enabled = true
              [31m-[0m [0mnetwork_type                        = "VFIO"
              [31m-[0m [0mremote_data_volume_type             = "PARAVIRTUALIZED"
            },
        ] [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mmetadata[0m[0m                            = { [31m# forces replacement[0m[0m
            "ssh_authorized_keys" = "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAyqqHqxX/DQB7bAU9De/Eq096y8kvGhs41kOnFAF+Mx0qhHuvEx8PVpr3zLNvpKnUmHfMCgdZyBtgbWZrb/Z5w8wKOMFj79UvFz7onlozMshRXMDcnNIu4gSMri5vzS/FjVLt/ku95uuVkML+vvAWnb+FdXOEqBeTQ7L9Zk4YsTCR39+7BNxZ4rSA9i2tCx9XD7fzLKBVuAMnelXzH4Hi2VIsJzzyakKn96faUrIKJuxgOCE9o1eHosyo1wq5i7HQw17LMlSkjamoIyWyYROXBreuIdWh5EdfQuH5Fwjwa9eY7bub+TYWYt8DgNP7d+/W7/OOXex1Y9oLsAetoxOEzw== rsa-key-20180822"
          [33m~[0m [0m"user_data"           = "" [33m->[0m [0m""
        }
      [33m~[0m [0m[1m[0mprivate_ip[0m[0m                          = "10.0.6.5" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mpublic_ip[0m[0m                           = (known after apply)
      [33m~[0m [0m[1m[0mregion[0m[0m                              = "phx" [33m->[0m [0m(known after apply)
        [1m[0mshape[0m[0m                               = "VM.DenseIO2.24"
      [33m~[0m [0m[1m[0mstate[0m[0m                               = "RUNNING" [33m->[0m [0m(known after apply)
        [1m[0msubnet_id[0m[0m                           = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q"
      [33m~[0m [0m[1m[0mtime_created[0m[0m                        = "2019-09-17 00:16:32.997 +0000 UTC" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mtime_maintenance_reboot_due[0m[0m         = (known after apply)

      [33m~[0m [0magent_config {
          [33m~[0m [0m[1m[0mis_monitoring_disabled[0m[0m = false [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0mcreate_vnic_details {
          [33m~[0m [0m[1m[0massign_public_ip[0m[0m       = "false" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdisplay_name[0m[0m           = "ss-compute-1" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mhostname_label[0m[0m         = "ss-compute-1" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mnsg_ids[0m[0m                = [] [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.6.5" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mskip_source_dest_check[0m[0m = false [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q" [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0msource_details {
          [33m~[0m [0m[1m[0mboot_volume_size_in_gbs[0m[0m = "47" [33m->[0m [0m(known after apply)
          [32m+[0m [0m[1m[0mkms_key_id[0m[0m              = (known after apply)
            [1m[0msource_id[0m[0m               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq"
            [1m[0msource_type[0m[0m             = "image"
        }

        timeouts {
            [1m[0mcreate[0m[0m = "120m"
        }
    }

[1m  # oci_core_instance.client_node[1][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_instance" "client_node" {
        [1m[0mavailability_domain[0m[0m                 = "vemA:PHX-AD-3"
      [33m~[0m [0m[1m[0mboot_volume_id[0m[0m                      = "ocid1.bootvolume.oc1.phx.abyhqljt24xnvysn7klhlnypttynfzpk6wvbmvdobke7yfl3znyegkba7auq" [33m->[0m [0m(known after apply)
        [1m[0mcompartment_id[0m[0m                      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
      [33m~[0m [0m[1m[0mdefined_tags[0m[0m                        = {} [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m                        = "ss-compute-2"
      [33m~[0m [0m[1m[0mfault_domain[0m[0m                        = "FAULT-DOMAIN-1" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mfreeform_tags[0m[0m                       = {} [33m->[0m [0m(known after apply)
        [1m[0mhostname_label[0m[0m                      = "ss-compute-2"
      [33m~[0m [0m[1m[0mid[0m[0m                                  = "ocid1.instance.oc1.phx.abyhqljt7fcmitetnodviz7gdyjwaquenmrwicu2pbamb5kuxe6mfk2v4gbq" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mimage[0m[0m                               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mipxe_script[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mis_pv_encryption_in_transit_enabled[0m[0m = (known after apply)
      [33m~[0m [0m[1m[0mlaunch_mode[0m[0m                         = "NATIVE" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mlaunch_options[0m[0m                      = [
          [31m-[0m [0m{
              [31m-[0m [0mboot_volume_type                    = "PARAVIRTUALIZED"
              [31m-[0m [0mfirmware                            = "UEFI_64"
              [31m-[0m [0mis_consistent_volume_naming_enabled = true
              [31m-[0m [0mis_pv_encryption_in_transit_enabled = true
              [31m-[0m [0mnetwork_type                        = "VFIO"
              [31m-[0m [0mremote_data_volume_type             = "PARAVIRTUALIZED"
            },
        ] [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mmetadata[0m[0m                            = { [31m# forces replacement[0m[0m
            "ssh_authorized_keys" = "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAyqqHqxX/DQB7bAU9De/Eq096y8kvGhs41kOnFAF+Mx0qhHuvEx8PVpr3zLNvpKnUmHfMCgdZyBtgbWZrb/Z5w8wKOMFj79UvFz7onlozMshRXMDcnNIu4gSMri5vzS/FjVLt/ku95uuVkML+vvAWnb+FdXOEqBeTQ7L9Zk4YsTCR39+7BNxZ4rSA9i2tCx9XD7fzLKBVuAMnelXzH4Hi2VIsJzzyakKn96faUrIKJuxgOCE9o1eHosyo1wq5i7HQw17LMlSkjamoIyWyYROXBreuIdWh5EdfQuH5Fwjwa9eY7bub+TYWYt8DgNP7d+/W7/OOXex1Y9oLsAetoxOEzw== rsa-key-20180822"
          [33m~[0m [0m"user_data"           = "" [33m->[0m [0m""
        }
      [33m~[0m [0m[1m[0mprivate_ip[0m[0m                          = "10.0.6.2" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mpublic_ip[0m[0m                           = (known after apply)
      [33m~[0m [0m[1m[0mregion[0m[0m                              = "phx" [33m->[0m [0m(known after apply)
        [1m[0mshape[0m[0m                               = "VM.DenseIO2.24"
      [33m~[0m [0m[1m[0mstate[0m[0m                               = "RUNNING" [33m->[0m [0m(known after apply)
        [1m[0msubnet_id[0m[0m                           = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q"
      [33m~[0m [0m[1m[0mtime_created[0m[0m                        = "2019-09-17 00:08:26.255 +0000 UTC" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mtime_maintenance_reboot_due[0m[0m         = (known after apply)

      [33m~[0m [0magent_config {
          [33m~[0m [0m[1m[0mis_monitoring_disabled[0m[0m = false [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0mcreate_vnic_details {
          [33m~[0m [0m[1m[0massign_public_ip[0m[0m       = "false" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdisplay_name[0m[0m           = "ss-compute-2" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mhostname_label[0m[0m         = "ss-compute-2" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mnsg_ids[0m[0m                = [] [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.6.2" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mskip_source_dest_check[0m[0m = false [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q" [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0msource_details {
          [33m~[0m [0m[1m[0mboot_volume_size_in_gbs[0m[0m = "47" [33m->[0m [0m(known after apply)
          [32m+[0m [0m[1m[0mkms_key_id[0m[0m              = (known after apply)
            [1m[0msource_id[0m[0m               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq"
            [1m[0msource_type[0m[0m             = "image"
        }

        timeouts {
            [1m[0mcreate[0m[0m = "120m"
        }
    }

[1m  # oci_core_instance.client_node[2][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_instance" "client_node" {
        [1m[0mavailability_domain[0m[0m                 = "vemA:PHX-AD-3"
      [33m~[0m [0m[1m[0mboot_volume_id[0m[0m                      = "ocid1.bootvolume.oc1.phx.abyhqljtgkhw2fu3dv7n23bimwmwlwnrq5nqhhfoo4gwvjjepoqhqmf4zarq" [33m->[0m [0m(known after apply)
        [1m[0mcompartment_id[0m[0m                      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
      [33m~[0m [0m[1m[0mdefined_tags[0m[0m                        = {} [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m                        = "ss-compute-3"
      [33m~[0m [0m[1m[0mfault_domain[0m[0m                        = "FAULT-DOMAIN-2" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mfreeform_tags[0m[0m                       = {} [33m->[0m [0m(known after apply)
        [1m[0mhostname_label[0m[0m                      = "ss-compute-3"
      [33m~[0m [0m[1m[0mid[0m[0m                                  = "ocid1.instance.oc1.phx.abyhqljtg5uu6qmx57cqjzacwg53e4rrj2piwehyyd3p4vnpj2nmfzh2hszq" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mimage[0m[0m                               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mipxe_script[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mis_pv_encryption_in_transit_enabled[0m[0m = (known after apply)
      [33m~[0m [0m[1m[0mlaunch_mode[0m[0m                         = "NATIVE" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mlaunch_options[0m[0m                      = [
          [31m-[0m [0m{
              [31m-[0m [0mboot_volume_type                    = "PARAVIRTUALIZED"
              [31m-[0m [0mfirmware                            = "UEFI_64"
              [31m-[0m [0mis_consistent_volume_naming_enabled = true
              [31m-[0m [0mis_pv_encryption_in_transit_enabled = true
              [31m-[0m [0mnetwork_type                        = "VFIO"
              [31m-[0m [0mremote_data_volume_type             = "PARAVIRTUALIZED"
            },
        ] [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mmetadata[0m[0m                            = { [31m# forces replacement[0m[0m
            "ssh_authorized_keys" = "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAyqqHqxX/DQB7bAU9De/Eq096y8kvGhs41kOnFAF+Mx0qhHuvEx8PVpr3zLNvpKnUmHfMCgdZyBtgbWZrb/Z5w8wKOMFj79UvFz7onlozMshRXMDcnNIu4gSMri5vzS/FjVLt/ku95uuVkML+vvAWnb+FdXOEqBeTQ7L9Zk4YsTCR39+7BNxZ4rSA9i2tCx9XD7fzLKBVuAMnelXzH4Hi2VIsJzzyakKn96faUrIKJuxgOCE9o1eHosyo1wq5i7HQw17LMlSkjamoIyWyYROXBreuIdWh5EdfQuH5Fwjwa9eY7bub+TYWYt8DgNP7d+/W7/OOXex1Y9oLsAetoxOEzw== rsa-key-20180822"
          [33m~[0m [0m"user_data"           = "IyEvdXNyL2Jpbi9lbnYgYmFzaApzZXQgLXgKdmVyc2lvbj0iNS4wLjMuMiIKZG93bmxvYWRVcmw9Imh0dHBzOi8vb2JqZWN0c3RvcmFnZS51cy1hc2hidXJuLTEub3JhY2xlY2xvdWQuY29tL3AvRExkci1Hd2ExdW9JX001YjNtVVdqdEVzdnlUTWlLeXNFNlNXOWNGa3EzNC9uL2hwYy9iL3NwZWN0cnVtX3NjYWxlL28vU3BlY3RydW1fU2NhbGVfRGF0YV9NYW5hZ2VtZW50LTUuMC4zLjIteDg2XzY0LUxpbnV4LWluc3RhbGwiCnNzaFByaXZhdGVLZXk9Ii0tLS0tQkVHSU4gUlNBIFBSSVZBVEUgS0VZLS0tLS0KTUlJRW9nSUJBQUtDQVFFQXlxcUhxeFgvRFFCN2JBVTlEZS9FcTA5Nnk4a3ZHaHM0MWtPbkZBRitNeDBxaEh1dgpFeDhQVnByM3pMTnZwS25VbUhmTUNnZFp5QnRnYldacmIvWjV3OHdLT01Gajc5VXZGejdvbmxvek1zaFJYTURjCm5OSXU0Z1NNcmk1dnpTL0ZqVkx0L2t1OTV1dVZrTUwrdnZBV25iK0ZkWE9FcUJlVFE3TDlaazRZc1RDUjM5KzcKQk54WjRyU0E5aTJ0Q3g5WEQ3ZnpMS0JWdUFNbmVsWHpINEhpMlZJc0p6enlha0tuOTZmYVVySUtKdXhnT0NFOQpvMWVIb3N5bzF3cTVpN0hRdzE3TE1sU2tqYW1vSXlXeVlST1hCcmV1SWRXaDVFZGZRdUg1Rndqd2E5ZVk3YnViCitUWVdZdDhEZ05QN2QrL1c3L09PWGV4MVk5b0xzQWV0b3hPRXp3SUJKUUtDQVFCdGpKeGNlcGUwQUVLMjdoTXEKSUwxVnJtdmp4ckd0UHlXa1FENmpCN25XY0tGY1hvZ21Bdk9Jd25nYm4wTkVRQi9qdG1CMEg2WW0rZ3FjQUFLNQpENXZEeUR6Z2FJa01CSWdvUGE0c0ZSVEJnUWxpa2NOYnIrSDlvWmdtelA0cHVQVXB5L1pFUko0QVIvM1J0WUxJCkV4TWsxanBOVXpMekU2bU1ZTUJTK2Nnb2JGR2o5T2ZqZFRobWRORG03NkNzQWxyNTFtQjRWOGtXdTZad1NJZTQKL0paOGNscGxSNjNjZ1hUWWgxay9xMnhheC9McllPZHFhMDVaK2UrSlE5ODlMb2pYc0NFalVOOEVHbHRjckRGRgpJVlExN3RHNDBqeEMwRHJYSmxsUmh1N1pCQlExWW93SDFhNlFZTVJ0cmhlanY2VGpPUnBDTDhkWWwvV2gvcXlBClMwQ05Bb0dCQU9nMzNzcXBVSmdrbE1IbEtlaERtdFRXZ29DK3JnVHRMZjYzeUVoeFlrcWFaSlAyYllobVJXaDIKTUhtUzEvYXZRbmZHTGd1MllDNzRHdndkOG9DUTgxSi9KWCtkYUxvVWhYUWJubmNFTjBQbTVZL2lrQ2FyTk9rbwo3NlJ1cE1kTU5YYWthSk8wOS8ycHNGN1BWQS93SS8xM0F1K1dFWnJNU3EwRTJwQThwV2N0QW9HQkFOOXI0a05kCkpobG0rdFl5bFVIdnMxbnJBbk1vNllNdGs1cy9vUlgrVEU2bGdIRDFjVFVzRGNEdzQySUtFQ1NjaE0xeHN4OW8KRnpycW8wc3VXcWpKanMzb1pxZmdZeHF4alFzQ2UrQTJrZDI4QzRDcFdpVlhFVHh5VWNrRXhDSjBqY216WExobwo4c2o2NGdZWnlxWXlkaHVoWUpTYU5hbk5Rd3R5cjVGNUZobHJBb0dCQUpCYUZON1g4OVF5YWs4RUV5R3RlK3dXCnBDYUVYbFlXNVQxNUtYa2o0eWQwdXcvZVg4TjkyQjVYVHBEREVLQkRib0hPT0V4NFNhQ29FTVk4SVI5OHN1NFgKcjRhdDlQNE13YWtLUCtrZVM5NFo2S1dNMWlYZ0RDSThDcGFscExNOU5mMmtlRnZSVytMZkdwdk0vT2RRRmw5SgordWYxZ0pDb2dYSjRvNG9YM0hDUkFvR0FTSFlFTVlYK2hNZHo4bkZGS2lRNkt3QWNlR0JMdTlkdUpJTlcxck5YCkJNQU4reDhyb29yVUJ6bGVnS2xSVi90cFYyTWxWa3RGemVzNzRRZ2RaeXlkQklLNWdvMzJvTitqWFlSRDJnUGMKUituMTVJbnp1UlZSc3IxSzlSWk5jdlZlYXU0UU84OENvZ3d0b1IwZklTVWZZdWc2LzhOUHJMRkdMVG56d0hwTQpXMFVDZ1lFQXdRNWZGSEVwZldlekdSRjBFbDl6bXBxZHcvUFlNaVZucW9LVGxBcGZWOTJJcXdIK1Q0NnVpQ2hjCmdyeEV5akJ5SjArS3FBdEpQdUlzVGVIRyt4bktKVzVvNmRDOXM2UFJNcmFqaVZTMjZyMVNHODdBK05pak1FVnIKdytSV25kaytiWkZHZkpqTVFHREx2UDJGQWdWeHJXS2xIT3k0ZlE0RzBmZzRCY2hLQTU0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLSIKc3NoUHVibGljS2V5PSJzc2gtcnNhIEFBQUFCM056YUMxeWMyRUFBQUFCSlFBQUFRRUF5cXFIcXhYL0RRQjdiQVU5RGUvRXEwOTZ5OGt2R2hzNDFrT25GQUYrTXgwcWhIdXZFeDhQVnByM3pMTnZwS25VbUhmTUNnZFp5QnRnYldacmIvWjV3OHdLT01Gajc5VXZGejdvbmxvek1zaFJYTURjbk5JdTRnU01yaTV2elMvRmpWTHQva3U5NXV1VmtNTCt2dkFXbmIrRmRYT0VxQmVUUTdMOVprNFlzVENSMzkrN0JOeFo0clNBOWkydEN4OVhEN2Z6TEtCVnVBTW5lbFh6SDRIaTJWSXNKenp5YWtLbjk2ZmFVcklLSnV4Z09DRTlvMWVIb3N5bzF3cTVpN0hRdzE3TE1sU2tqYW1vSXlXeVlST1hCcmV1SWRXaDVFZGZRdUg1Rndqd2E5ZVk3YnViK1RZV1l0OERnTlA3ZCsvVzcvT09YZXgxWTlvTHNBZXRveE9Fenc9PSByc2Eta2V5LTIwMTgwODIyIgp0b3RhbE5zZE5vZGVQb29scz0iMiIKbnNkTm9kZXNQZXJQb29sPSIyIgpuc2ROb2RlQ291bnQ9IjQiCm5zZE5vZGVIb3N0bmFtZVByZWZpeD0ic3Mtc2VydmVyLSIKY2xpZW50Tm9kZUNvdW50PSI0IgpjbGllbnROb2RlSG9zdG5hbWVQcmVmaXg9InNzLWNvbXB1dGUtIgpibG9ja1NpemU9IjJNIgpkYXRhUmVwbGljYT0iMSIKbWV0YWRhdGFSZXBsaWNhPSIxIgpncGZzTW91bnRQb2ludD0iL2dwZnMvZnMxIgpoaWdoQXZhaWxhYmlsaXR5PSJmYWxzZSIKc2hhcmVkRGF0YURpc2tDb3VudD0iNDQiCmJsb2NrVm9sdW1lc1BlclBvb2w9IjIyIgppbnN0YWxsZXJOb2RlPSJzcy1zZXJ2ZXItMSIKcHJpdmF0ZVN1Ym5ldHNGUUROPSJncGZzLm9yYWNsZXZjbi5jb20gcHJpdmF0ZTAuZ3Bmcy5vcmFjbGV2Y24uY29tIgpwcml2YXRlQlN1Ym5ldHNGUUROPSJncGZzLm9yYWNsZXZjbi5jb20gcHJpdmF0ZWIwLmdwZnMub3JhY2xldmNuLmNvbSIKY29tcGFueU5hbWU9IkNvbXBhbnkgTmFtZSIKY29tcGFueUlEPSIxMjM0NTY3Igpjb3VudHJ5Q29kZT0iVVMiCmVtYWlsYWRkcmVzcz0ibmFtZUBlbWFpbC5jb20iCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMiCiMjIyMjIyMjIyMjIyMjIyMjIFR1cm4gT2ZmIHRoZSBGaXJld2FsbCAjIyMjIyMjIyMjIyMjIyMiCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMiCmVjaG8gIlR1cm5pbmcgb2ZmIHRoZSBGaXJld2FsbC4uLiIKd2hpY2ggYXB0LWdldCAmPiAvZGV2L251bGwKaWYgWyAkPyAtZXEgMCBdIDsgdGhlbgogICAgZWNobyAiIiA+IC9ldGMvaXB0YWJsZXMvcnVsZXMudjQKICAgIGVjaG8gIiIgPiAvZXRjL2lwdGFibGVzL3J1bGVzLnY2CgogICAgaXB0YWJsZXMgLUYKICAgIGlwdGFibGVzIC1YCiAgICBpcHRhYmxlcyAtdCBuYXQgLUYKICAgIGlwdGFibGVzIC10IG5hdCAtWAogICAgaXB0YWJsZXMgLXQgbWFuZ2xlIC1GCiAgICBpcHRhYmxlcyAtdCBtYW5nbGUgLVgKICAgIGlwdGFibGVzIC1QIElOUFVUIEFDQ0VQVAogICAgaXB0YWJsZXMgLVAgT1VUUFVUIEFDQ0VQVAogICAgaXB0YWJsZXMgLVAgRk9SV0FSRCBBQ0NFUFQKZWxzZQogICAgc2VydmljZSBmaXJld2FsbGQgc3RvcAogICAgY2hrY29uZmlnIGZpcmV3YWxsZCBvZmYKZmkKCiMjIGNsb3VkLWluaXQgYm9vdHN0cmFwIHNjcmlwdAoKCmVjaG8gIgp2ZXJzaW9uPVwiJHZlcnNpb25cIgpkb3dubG9hZFVybD1cIiRkb3dubG9hZFVybFwiCnNzaFByaXZhdGVLZXk9XCIkc3NoUHJpdmF0ZUtleVwiCnNzaFB1YmxpY0tleT1cIiRzc2hQdWJsaWNLZXlcIgp0b3RhbE5zZE5vZGVQb29scz1cIiR0b3RhbE5zZE5vZGVQb29sc1wiCm5zZE5vZGVzUGVyUG9vbD1cIiRuc2ROb2Rlc1BlclBvb2xcIgpuc2ROb2RlQ291bnQ9XCIkbnNkTm9kZUNvdW50XCIKbnNkTm9kZUhvc3RuYW1lUHJlZml4PVwiJG5zZE5vZGVIb3N0bmFtZVByZWZpeFwiCmNsaWVudE5vZGVDb3VudD1cIiRjbGllbnROb2RlQ291bnRcIgpjbGllbnROb2RlSG9zdG5hbWVQcmVmaXg9XCIkY2xpZW50Tm9kZUhvc3RuYW1lUHJlZml4XCIKYmxvY2tTaXplPVwiJGJsb2NrU2l6ZVwiCmRhdGFSZXBsaWNhPVwiJGRhdGFSZXBsaWNhXCIKbWV0YWRhdGFSZXBsaWNhPVwiJG1ldGFkYXRhUmVwbGljYVwiCmdwZnNNb3VudFBvaW50PVwiJGdwZnNNb3VudFBvaW50XCIKaGlnaEF2YWlsYWJpbGl0eT1cIiRoaWdoQXZhaWxhYmlsaXR5XCIKc2hhcmVkRGF0YURpc2tDb3VudD1cIiRzaGFyZWREYXRhRGlza0NvdW50XCIKYmxvY2tWb2x1bWVzUGVyUG9vbD1cIiRibG9ja1ZvbHVtZXNQZXJQb29sXCIKaW5zdGFsbGVyTm9kZT1cIiRpbnN0YWxsZXJOb2RlXCIKcHJpdmF0ZVN1Ym5ldHNGUUROPVwiJHByaXZhdGVTdWJuZXRzRlFETlwiCnByaXZhdGVCU3VibmV0c0ZRRE49XCIkcHJpdmF0ZUJTdWJuZXRzRlFETlwiCmNvbXBhbnlOYW1lPVwiJGNvbXBhbnlOYW1lXCIKY29tcGFueUlEPVwiJGNvbXBhbnlJRFwiCmNvdW50cnlDb2RlPVwiJGNvdW50cnlDb2RlXCIKZW1haWxhZGRyZXNzPVwiJGVtYWlsYWRkcmVzc1wiCiIgPiAvdG1wL2dwZnNfZW52X3ZhcmlhYmxlcy5zaAoKZWNobyAiaW5zdGFsbGVyTm9kZSA9ICRpbnN0YWxsZXJOb2RlIgplY2hvICIkc3NoUHJpdmF0ZUtleSIgPiAvcm9vdC8uc3NoL2lkX3JzYQplY2hvICIkc3NoUHVibGljS2V5IiA+IC9yb290Ly5zc2gvaWRfcnNhLnB1YgpjaG1vZCA2MDAgfi8uc3NoL2lkX3JzYQpjaG1vZCA2MDAgfi8uc3NoL2lkX3JzYS5wdWIKY2htb2QgNjQwIH4vLnNzaC9hdXRob3JpemVkX2tleXMKCiMgd2UgbWlnaHQgbmVlZCB0aGlzIGZvciBCTSBzaGFwZXMKc2xlZXAgNjBzCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyIKIyMjIyMjIyMjIyMjIyMjIyMgICBVcGRhdGUgcmVzb2x2LmNvbmYgICMjIyMjIyMjIyMjIyMjIyIKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyIKIyMgTW9kaWZ5IHJlc29sdi5jb25mIHRvIGVuc3VyZSBETlMgbG9va3VwcyB3b3JrIGZyb20gb25lIHByaXZhdGUgc3VibmV0IHRvIGFub3RoZXIgc3VibmV0Cm12IC9ldGMvcmVzb2x2LmNvbmYgL2V0Yy9yZXNvbHYuY29uZi5iYWNrdXAKZWNobyBgaG9zdG5hbWVgIHwgZ3JlcCAtcSAkY2xpZW50Tm9kZUhvc3RuYW1lUHJlZml4CmlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICBlY2hvICJzZWFyY2ggJHtwcml2YXRlQlN1Ym5ldHNGUUROfSIgPiAvZXRjL3Jlc29sdi5jb25mCiAgZWNobyAibmFtZXNlcnZlciAxNjkuMjU0LjE2OS4yNTQiID4+IC9ldGMvcmVzb2x2LmNvbmYKZWxzZSAKICBlY2hvICJzZWFyY2ggJHtwcml2YXRlQlN1Ym5ldHNGUUROfSAke3ByaXZhdGVTdWJuZXRzRlFETn0gIiA+IC9ldGMvcmVzb2x2LmNvbmYKICBlY2hvICJuYW1lc2VydmVyIDE2OS4yNTQuMTY5LjI1NCIgPj4gL2V0Yy9yZXNvbHYuY29uZgpmaQoKIyBUaGUgYmVsb3cgaXMgdG8gZW5zdXJlIGFueSBjdXN0b20gY2hhbmdlIHRvIC9ldGMvaG9zdHMgYW5kIC9ldGMvcmVzb2x2LmNvbmYgd2lsbCBub3QgYmUgb3ZlcndyaXR0ZW4gd2l0aCBkYXRhIGZyb20gbWV0YXNlcnZpY2UsIGJ1dCBkaGNsaWVudCB3aWxsIHN0aWxsIG92ZXJ3cml0ZSAvZXRjL3Jlc29sdi5jb25mLiAgSGVuY2UgZG8gdGhlIGFkZGl0aW9uYWwgc3RlcCB1c2luZyBjaGF0dHIgY29tbWFuZC4KaWYgWyAteiAvZXRjL29jaS1ob3N0bmFtZS5jb25mIF07IHRoZW4KICBlY2hvICJQUkVTRVJWRV9IT1NUSU5GTz0yIiA+IC9ldGMvb2NpLWhvc3RuYW1lLmNvbmYKZWxzZQogICMgaHR0cHM6Ly9kb2NzLmNsb3VkLm9yYWNsZS5jb20vaWFhcy9Db250ZW50L05ldHdvcmsvVGFza3MvbWFuYWdpbmdESENQLmh0bSNub3RlcwogIHNlZCAtaSAicy9eUFJFU0VSVkVfSE9TVElORk8vI1BSRVNFUlZFX0hPU1RJTkZPL2ciIC9ldGMvb2NpLWhvc3RuYW1lLmNvbmYKICBlY2hvICJQUkVTRVJWRV9IT1NUSU5GTz0yIiA+PiAvZXRjL29jaS1ob3N0bmFtZS5jb25mCmZpCmNhdCAvZXRjL29jaS1ob3N0bmFtZS5jb25mCiMgVGhlIGJlbG93IGlzIHRvIGVuc3VyZSBhYm92ZSBjaGFuZ2VzIHdpbGwgbm90IGJlIG92ZXJ3cml0dGVuIGJ5IGRoY2xpZW50CmNoYXR0ciAraSAvZXRjL3Jlc29sdi5jb25mCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyIKIyMjIyMjIyMjIyMjIyMjIyMgICBjb25maWd1cmUgMm5kIE5JQyAgICMjIyMjIyMjIyMjIyMjIyIKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyIKZWNobyBgaG9zdG5hbWVgIHwgZ3JlcCAtcSAkY2xpZW50Tm9kZUhvc3RuYW1lUHJlZml4CmlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICBlY2hvICJjbGllbnQgbm9kZXMgLSBnZXQgaG9zdG5hbWUuLi4iCiAgdGhpc0ZRRE49YGhvc3RuYW1lIC0tZnFkbmAKICB0aGlzSG9zdD0ke3RoaXNGUUROJSUuKn0KZWxzZQogIGlmY29uZmlnIHwgZ3JlcCAiXmVubzNkMTpcfF5lbnA3MHMwZjFkMToiCiAgaWYgWyAkPyAtZXEgMCBdIDsgdGhlbgogICAgZWNobyAiMiBOSUMgc2V0dXAiCiAgICBpZmNvbmZpZyB8IGdyZXAgIl5lbnA3MHMwZjFkMToiCiAgICAgIGlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICAgICAgICBpbnRlcmZhY2U9ImVucDcwczBmMWQxIgogICAgICBlbHNlCiAgICAgICAgaW50ZXJmYWNlPSJlbm8zZDEiCiAgICAgIGZpCgogICAgICBpcCByb3V0ZQogICAgICBpZmNvbmZpZwogICAgICByb3V0ZQogICAgICBpcCBhZGRyCgogICAgICBjZCAvZXRjL3N5c2NvbmZpZy9uZXR3b3JrLXNjcmlwdHMvCgogICAgICAjIFdhaXQgdGlsbCAybmQgTklDIGlzIGNvbmZpZ3VyZWQsIHNpbmNlIHRoZSBHUEZTIGNsdXN0ZXIgd2lsbCB1c2UgdGhlIDJuZCBOSUMgZm9yIGNsdXN0ZXIgY29tbS4KICAgICAgcHJpdmF0ZUlwPWBjdXJsIC1zIGh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvb3BjL3YxL3ZuaWNzLyB8IGpxICcuWzFdLnByaXZhdGVJcCcgfCBzZWQgJ3MvIi8vZycgYCA7IGVjaG8gJHByaXZhdGVJcAogICAgICB3aGlsZSBbIC16ICIkcHJpdmF0ZUlwIiAtbyAkcHJpdmF0ZUlwID0gIm51bGwiIF07CiAgICAgIGRvCiAgICAgICAgc2xlZXAgMTBzCiAgICAgICAgZWNobyAiV2FpdGluZyBmb3IgMm5kIFBoeXNpY2FsIE5JQyB0byBnZXQgY29uZmlndXJlZCB3aXRoIGhvc3RuYW1lIgogICAgICAgIHByaXZhdGVJcD1gY3VybCAtcyBodHRwOi8vMTY5LjI1NC4xNjkuMjU0L29wYy92MS92bmljcy8gfCBqcSAnLlsxXS5wcml2YXRlSXAnIHwgc2VkICdzLyIvL2cnIGAgOyBlY2hvICRwcml2YXRlSXAKICAgICAgZG9uZQogICAgICBlY2hvICJTZXJ2ZXIgbm9kZXMgd2l0aCAyIE5JQ3MgLSBnZXQgaG9zdG5hbWUgZm9yIDJuZCBOSUMuLi4iCgogICAgICBwcml2YXRlSXA9YGN1cmwgLXMgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9vcGMvdjEvdm5pY3MvIHwganEgJy5bMV0ucHJpdmF0ZUlwJyB8IHNlZCAncy8iLy9nJyBgIDsgZWNobyAkcHJpdmF0ZUlwCiAgICAgIG1hY0FkZHI9YGN1cmwgLXMgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9vcGMvdjEvdm5pY3MvIHwganEgJy5bMV0ubWFjQWRkcicgfCBzZWQgJ3MvIi8vZycgYCA7IGVjaG8gJG1hY0FkZHIKICAgICAgc3VibmV0Q2lkckJsb2NrPWBjdXJsIC1zIGh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvb3BjL3YxL3ZuaWNzLyB8IGpxICcuWzFdLnN1Ym5ldENpZHJCbG9jaycgfCBzZWQgJ3MvIi8vZycgYCA7IGVjaG8gJHN1Ym5ldENpZHJCbG9jawogICAgICB2bmljSWQ9YGN1cmwgLXMgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9vcGMvdjEvdm5pY3MvIHwganEgJy5bMV0udm5pY0lkJyB8IHNlZCAncy8iLy9nJyBgIDsgZWNobyAkdm5pY0lkCgogICAgICBlY2hvICIkc3VibmV0Q2lkckJsb2NrIHZpYSAkcHJpdmF0ZUlwIGRldiAkaW50ZXJmYWNlIiA+ICAvZXRjL3N5c2NvbmZpZy9uZXR3b3JrLXNjcmlwdHMvcm91dGUtJGludGVyZmFjZQoKICAgICAgZWNobyAiREVWSUNFPSRpbnRlcmZhY2UKSFdBRERSPSRtYWNBZGRyCk9OQk9PVD15ZXMKVFlQRT1FdGhlcm5ldApVU0VSQ1RMPW5vCklQQUREUj0kcHJpdmF0ZUlwCk5FVE1BU0s9MjU1LjI1NS4yNTUuMApNVFU9OTAwMApOTV9DT05UUk9MTEVEPW5vCkVUSFRPT0xfT1BUUz1cIi1HICR7aW50ZXJmYWNlfSByeCAyMDQ3IHR4IDIwNDcgcngtanVtYm8gODE5MTsgLUwgJHtpbnRlcmZhY2V9IGNvbWJpbmVkIDc0XCIKIiA+IC9ldGMvc3lzY29uZmlnL25ldHdvcmstc2NyaXB0cy9pZmNmZy0kaW50ZXJmYWNlCgoKICAgICAgc3lzdGVtY3RsIHN0YXR1cyBuZXR3b3JrLnNlcnZpY2UKICAgICAgIyBZb3UgbWlnaHQgc2VlIHNvbWUgREhDUCBlcnJvciwgaWdub3JlIGl0LiAgSXRzIG5vdCBpbXBhY3RpbmcgYW55IGZ1bmN0aW9uYWxpdHkgSSBrbm93IG9mLgogICAgICBzeXN0ZW1jdGwgcmVzdGFydCBuZXR3b3JrLnNlcnZpY2UKCiAgICAgIGlwIHJvdXRlIDsgaWZjb25maWcgOyByb3V0ZSA7IGlwIGFkZHIgOwojIEFkZCBsb2dpYyB0byBlbnN1cmUgdGhlIGJlbG93IGlzIG5vdCBlbXB0eQogICAgICBzZWNvbmROaWNGUUROSG9zdG5hbWU9YG5zbG9va3VwICRwcml2YXRlSXAgfCBncmVwICJuYW1lID0gIiB8IGdhd2sgLUYiPSIgJ3sgcHJpbnQgJDIgfScgfCBzZWQgICJzfF4gfHxnIiB8IHNlZCAgInN8XC4kfHxnImAKICAgICAgdGhpc0ZRRE49JHNlY29uZE5pY0ZRRE5Ib3N0bmFtZQogICAgICB0aGlzSG9zdD0ke3RoaXNGUUROJSUuKn0KICAgICAgc2Vjb25kTklDRG9tYWluTmFtZT0ke3RoaXNGUUROIyouKn0KICAgICAgZWNobyAkc2Vjb25kTklDRG9tYWluTmFtZQogICAgICBwcmltYXJ5TklDSG9zdG5hbWU9ImBob3N0bmFtZWAiCgogICAgZWxzZQogICAgICAjIFNlcnZlcnMgd2l0aCBvbmx5IDEgcGh5c2ljYWwgTklDCiAgICAgIGVjaG8gIlNlcnZlciBub2RlcyB3aXRoIDEgcGh5c2ljYWwgTklDIC0gZ2V0IGhvc3RuYW1lIGZvciAxc3QgTklDLi4uIgogICAgICB0aGlzRlFETj0iYGhvc3RuYW1lIC0tZnFkbmAiCiAgICAgIHRoaXNIb3N0PSIke3RoaXNGUUROJSUuKn0iCiAgICBmaQpmaQoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMiCiMjIyMjIyMjICBjb25maWd1cmUgMXN0IE5JQyBmb3IgcGVyZm9ybWFuY2UgICAjIyMjIyMjIyMiCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMiCiMgRmlyc3QgTklDIG5hbWVzCiMgZW5vMiAgJiBlbnMzCmlmY29uZmlnIHwgZ3JlcCAiXmVubzI6IgppZiBbICQ/IC1lcSAwIF0gOyB0aGVuCiAgcHJpbWFyeU5JQ0ludGVyZmFjZT0iZW5vMiIKZmkKCmlmY29uZmlnIHwgZ3JlcCAiXmVuczM6IgppZiBbICQ/IC1lcSAwIF0gOyB0aGVuCiAgcHJpbWFyeU5JQ0ludGVyZmFjZT0iZW5zMyIKZmkKCmlmY29uZmlnIHwgZ3JlcCAiXmVucDcwczBmMDoiCmlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICBwcmltYXJ5TklDSW50ZXJmYWNlPSJlbnA3MHMwZjAiCmZpCgojZWNobyAiTVRVPTkwMDAiID4+IC9ldGMvc3lzY29uZmlnL25ldHdvcmstc2NyaXB0cy9pZmNmZy0kcHJpbWFyeU5JQ0ludGVyZmFjZQojZWNobyAiTk1fQ09OVFJPTExFRD1ubyIgPj4gL2V0Yy9zeXNjb25maWcvbmV0d29yay1zY3JpcHRzL2lmY2ZnLSRwcmltYXJ5TklDSW50ZXJmYWNlCiNlY2hvICJFVEhUT09MX09QVFM9XCItRyAke3ByaW1hcnlOSUNJbnRlcmZhY2V9IHJ4IDIwNDcgdHggMjA0NyByeC1qdW1ibyA4MTkxOyAtTCAke3ByaW1hcnlOSUNJbnRlcmZhY2V9IGNvbWJpbmVkIDc0XCIgIiA+PiAvZXRjL3N5c2NvbmZpZy9uZXR3b3JrLXNjcmlwdHMvaWZjZmctJHByaW1hcnlOSUNJbnRlcmZhY2UKCmVjaG8gImV0aHRvb2wgLUcgJHByaW1hcnlOSUNJbnRlcmZhY2UgcnggMjA0NyB0eCAyMDQ3IHJ4LWp1bWJvIDgxOTEiID4+IC9ldGMvcmMubG9jYWwKZWNobyAiZXRodG9vbCAtTCAkcHJpbWFyeU5JQ0ludGVyZmFjZSBjb21iaW5lZCA3NCIgPj4gL2V0Yy9yYy5sb2NhbApjaG1vZCAreCAvZXRjL3JjLmxvY2FsCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIgoKCiMgQWRkIGhvc3QgaW5mbyB0byBncGZzX2Vudl92YXJpYWJsZXMuc2ggZm9yIG90aGVyIHNjcmlwdHMgdG8gcmUtdXNlCmVjaG8gInRoaXNGUUROPVwiJHRoaXNGUUROXCIiID4+IC90bXAvZ3Bmc19lbnZfdmFyaWFibGVzLnNoCmVjaG8gInRoaXNIb3N0PVwiJHRoaXNIb3N0XCIiID4+IC90bXAvZ3Bmc19lbnZfdmFyaWFibGVzLnNoCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIgoKbXYgL2V0Yy95dW0ucmVwb3MuZC9lcGVsLnJlcG8gIC9ldGMveXVtLnJlcG9zLmQvZXBlbC5yZXBvLmRpc2FibGVkCm12IC9ldGMveXVtLnJlcG9zLmQvZXBlbC10ZXN0aW5nLnJlcG8gIC9ldGMveXVtLnJlcG9zLmQvZXBlbC10ZXN0aW5nLnJlcG8uZGlzYWJsZWQKc2VkIC1pICJzL1NFTElOVVg9ZW5mb3JjaW5nL1NFTElOVVg9ZGlzYWJsZWQvZyIgL2V0Yy9zZWxpbnV4L2NvbmZpZwpzZXRlbmZvcmNlIDAgCgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMgT1MgUGVyZm9ybWFuY2UgdHVuaW5nCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKCiMgVGhlIGJlbG93IGFwcGxpZXMgZm9yIGJvdGggY2xpZW50IGFuZCBzZXJ2ZXIgbm9kZXMgKHN0b3JhZ2UpCmNkIC91c3IvbGliL3R1bmVkLwpjcCAtciB0aHJvdWdocHV0LXBlcmZvcm1hbmNlLyBncGZzLW9jaS1wZXJmb3JtYW5jZQoKZWNobyAiCiMKIyB0dW5lZCBjb25maWd1cmF0aW9uCiMKClttYWluXQpzdW1tYXJ5PUJyb2FkbHkgYXBwbGljYWJsZSB0dW5pbmcgdGhhdCBwcm92aWRlcyBleGNlbGxlbnQgcGVyZm9ybWFuY2UgYWNyb3NzIGEgdmFyaWV0eSBvZiBjb21tb24gc2VydmVyIHdvcmtsb2FkcwoKW2NwdV0KZm9yY2VfbGF0ZW5jeT0xCmdvdmVybm9yPXBlcmZvcm1hbmNlCmVuZXJneV9wZXJmX2JpYXM9cGVyZm9ybWFuY2UKbWluX3BlcmZfcGN0PTEwMAoKW3ZtXQp0cmFuc3BhcmVudF9odWdlX3BhZ2VzPW5ldmVyCgpbc3lzY3RsXQpuZXQuaXB2NC50Y3BfdGltZXN0YW1wcz0xCm5ldC5pcHY0LnRjcF9zYWNrPTEKbmV0LmlwdjQudGNwX2RzYWNrPTEKbmV0LmlwdjQudGNwX2xvd19sYXRlbmN5PTEKbmV0LmlwdjQudGNwX2Fkdl93aW5fc2NhbGU9MgpuZXQuaXB2NC50Y3Bfd2luZG93X3NjYWxpbmc9MQpuZXQuaXB2NC50Y3Bfc2xvd19zdGFydF9hZnRlcl9pZGxlPTAKbmV0LmlwdjQudGNwX3N5bl9yZXRyaWVzPTgKbmV0LmlwdjQudGNwX3JtZW09NDA5NiA4NzM4MCAxNjc3NzIxNgpuZXQuaXB2NC50Y3Bfd21lbT00MDk2IDY1NTM2IDE2Nzc3MjE2Cm5ldC5jb3JlLnJtZW1fbWF4PTE2Nzc3MjE2Cm5ldC5jb3JlLndtZW1fbWF4PTE2Nzc3MjE2Cm5ldC5jb3JlLnJtZW1fZGVmYXVsdD0xNjc3NzIxNgpuZXQuY29yZS53bWVtX2RlZmF1bHQ9MTY3NzcyMTYKbmV0LmNvcmUub3B0bWVtX21heD0xNjc3NzIxNgpuZXQuY29yZS5zb21heGNvbm4gPSA4MTkyCm5ldC5jb3JlLm5ldGRldl9tYXhfYmFja2xvZz0yNTAwMDAKc3VucnBjLnVkcF9zbG90X3RhYmxlX2VudHJpZXM9MTI4CnN1bnJwYy50Y3Bfc2xvdF90YWJsZV9lbnRyaWVzPTEyOAprZXJuZWwuc3lzcnEgPSAxCmtlcm5lbC5zY2hlZF9taW5fZ3JhbnVsYXJpdHlfbnMgPSAxMDAwMDAwMAprZXJuZWwuc2NoZWRfd2FrZXVwX2dyYW51bGFyaXR5X25zID0gMTUwMDAwMDAKdm0ubWluX2ZyZWVfa2J5dGVzID0gMTY3NzcyMTYKdm0uZGlydHlfcmF0aW8gPSAzMAp2bS5kaXJ0eV9iYWNrZ3JvdW5kX3JhdGlvID0gMTAKdm0uc3dhcHBpbmVzcz0zMAoiID4gZ3Bmcy1vY2ktcGVyZm9ybWFuY2UvdHVuZWQuY29uZgoKY2QgLQoKCiMgYmVmb3JlIGFwcGx5aW5nIHRvIGNsaWVudCBub2RlcywgbWFrZSBzdXJlIHRoZXkgaGF2ZSBlbm91Z2ggbWVtb3J5LgplY2hvICIkdGhpc0hvc3QiIHwgZ3JlcCAtcSAgJGNsaWVudE5vZGVIb3N0bmFtZVByZWZpeAppZiBbICQ/IC1lcSAwIF0gOyB0aGVuCiAgY29yZUlkQ291bnQ9YGdyZXAgIl5jb3JlIGlkIiAvcHJvYy9jcHVpbmZvIHwgc29ydCAtdSB8IHdjIC1sYCA7IGVjaG8gJGNvcmVJZENvdW50CiAgc29ja2V0Q291bnQ9YGVjaG8gJCgoJChncmVwICJecGh5c2ljYWwgaWQiIC9wcm9jL2NwdWluZm8gfCBhd2sgJ3twcmludCAkNH0nIHwgc29ydCAtdW4gfCB0YWlsIC0xKSsxKSlgIDsgZWNobyAkc29ja2V0Q291bnQKICBpZiBbICQoKHNvY2tldENvdW50KmNvcmVJZENvdW50KSkgLWd0IDQgIF07IHRoZW4KICAgIHR1bmVkLWFkbSBwcm9maWxlIGdwZnMtb2NpLXBlcmZvcm1hbmNlCiAgZWxzZQogICAgIyBDbGllbnQgaXMgdXNpbmcgc2hhcGUgd2l0aCBsZXNzIHRoYW4gNCBwaHlzaWNhbCBjb3JlcyBhbmQgbGVzcyAzMEdCIG1lbW9yeSwgYWJvdmUgdHVuZWQgcHJvZmlsZSByZXF1aXJlcyBhdGxlYXN0IDE2R0Igb2Ygdm0ubWluX2ZyZWVfa2J5dGVzLCBoZW5jZSBkb24ndCBhcHBseSB0dW5pbmcgYmUgZGVmYXVsdC4gIExldCB1c2VyIGV2YWx1YXRlIHdoYXQgYXJlIHZhbGlkIHZhbHVlcyBmb3Igc3VjaCBzbWFsbCBjb21wdXRlIHNoYXBlcy4KICAgIGVjaG8gInNraXAgcHJvZmlsZSB0dW5pbmcuLi4iCiAgZmkgOwpmaTsKCgplY2hvICIkdGhpc0hvc3QiIHwgZ3JlcCAtcSAgJG5zZE5vZGVIb3N0bmFtZVByZWZpeAppZiBbICQ/IC1lcSAwIF0gOyB0aGVuCiAgdHVuZWQtYWRtIHByb2ZpbGUgZ3Bmcy1vY2ktcGVyZm9ybWFuY2UKZmkKCiMgRGlzcGxheSBhY3RpdmUgcHJvZmlsZQp0dW5lZC1hZG0gYWN0aXZlCgoKZWNobyAiJHRoaXNIb3N0IiB8IGdyZXAgLXEgICRjbGllbnROb2RlSG9zdG5hbWVQcmVmaXgKaWYgWyAkPyAtZXEgMCBdIDsgdGhlbgoKICAjIFRoaXMgbWlnaHQgYmUgYXBwbGljYWJsZSBvbmx5IGZvciBjb21wdXRlLW4gbm9kZXMuICBJdHMgdW5jbGVhciBmcm9tIHJlY29tbWVuZGF0aW9ucyBkb2MuICAKICAjIHJlcXVpcmUgcmVzdGFydCBmb3IgdGhlIGNoYW5nZSB0byBiZSBlZmZlY3RpdmUKICBlY2hvICIqIHNvZnQgbm9maWxlIDUwMDAwMCIgPj4gL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZgogIGVjaG8gIiogc29mdCBucHJvYyAxMzEwNzIiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqIGhhcmQgbm9maWxlIDUwMDAwMCIgPj4gL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZgogIGVjaG8gIiogaGFyZCBucHJvYyAxMzEwNzIiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKCgogICMgVG8gc2V0IHZhbHVlcyBmb3IgY3VycmVudCBzZXNzaW9uCiAgdWxpbWl0IC1uIDUwMDAwMAogIHVsaW1pdCAtdSAxMzEwNzIKCiAgIyBjaGVjayBpZiB0aGUgdWxpbWl0cyB3ZXJlIHVwZGF0ZWQgZm9yIHRoZSBjdXJyZW50IHNlc3Npb24KICB1bGltaXQgLW4gCiAgdWxpbWl0IC11ICAKCiAgZWNobyAidWxpbWl0IC1uIDUwMDAwMCA+PiAgfi8uYmFzaF9wcm9maWxlCiAgZWNobyAidWxpbWl0IC11IDEzMTA3MiA+PiAgfi8uYmFzaF9wcm9maWxlCgoKZWxzZQogICMgQXNzdW1lIGl0cyBzZXJ2ZXIgbm9kZQoKICBlY2hvICIqICAgc29mdCAgICBtZW1sb2NrICAgICAgLTEgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCiAgZWNobyAiKiAgIGhhcmQgICAgbWVtbG9jayAgICAgIC0xICIgPj4gL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZgogIGVjaG8gIiogICBzb2Z0ICAgIHJzcyAgICAgICAgICAtMSAiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqICAgaGFyZCAgICByc3MgICAgICAgICAgLTEgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCiAgZWNobyAiKiAgIHNvZnQgICAgY29yZSAgICAgICAgICAtMSAiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqICAgaGFyZCAgICBjb3JlICAgICAgICAgIC0xICIgPj4gL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZgogIGVjaG8gIiogICBzb2Z0ICAgIG1heGxvZ2lucyAgICAgODE5MiAiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqICAgaGFyZCAgICBtYXhsb2dpbnMgICAgIDgxOTIgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCiAgZWNobyAiKiAgIHNvZnQgICAgc3RhY2sgICAgICAgICAtMSAiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqICAgaGFyZCAgICBzdGFjayAgICAgICAgIC0xICIgPj4gL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZgogIGVjaG8gIiogICBzb2Z0ICAgIG5wcm9jICAgICAgICAgMjA2NzU1NCAiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqICAgaGFyZCAgICBucHJvYyAgICAgICAgIDIwNjc1NTQgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCiAgZWNobyAiKiBzb2Z0IG5vZmlsZSA1MDAwMDAgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCiAgZWNobyAiKiBoYXJkIG5vZmlsZSA1MDAwMDAgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCgoKICBlY2hvICJ1bGltaXQgLWwgdW5saW1pdGVkIiA+PiAgfi8uYmFzaF9wcm9maWxlCiAgZWNobyAidWxpbWl0IC1tIHVubGltaXRlZCIgPj4gIH4vLmJhc2hfcHJvZmlsZQogIGVjaG8gInVsaW1pdCAtYyB1bmxpbWl0ZWQiID4+ICB+Ly5iYXNoX3Byb2ZpbGUKICBlY2hvICJ1bGltaXQgLXMgdW5saW1pdGVkIiA+PiAgfi8uYmFzaF9wcm9maWxlCiAgZWNobyAidWxpbWl0IC11IDIwNjc1NTQiID4+ICB+Ly5iYXNoX3Byb2ZpbGUKICBlY2hvICJ1bGltaXQgLW4gNTAwMDAwIiA+PiAgfi8uYmFzaF9wcm9maWxlCgoKZWNobyAnIwojIElkZW50aWZ5IGVsaWdpYmxlIFNDU0kgZGlza3MgYnkgdGhlIGFic2VuY2Ugb2YgYSBTV0FQIHBhcnRpdGlvbi4KIyBUaGUgb25seSBhdHRyaWJ1dGUgdGhhdCBzaG91bGQgcG9zc2libHkgYmUgY2hhbmdlZCBpcyBtYXhfc2VjdG9yc19rYiwKIyB1cCB0byBhIHZhbHVlIG9mIDgxOTIsIGRlcGVuZGluZyBvbiB3aGF0IHRoZSBTQ1NJIGRyaXZlciBhbmQgZGlza3Mgc3VwcG9ydC4KIwpBQ1RJT049PSJhZGR8Y2hhbmdlIiwgU1VCU1lTVEVNPT0iYmxvY2siLCBLRVJORUw9PSJzZCpbXjAtOV0iLCBQUk9HUkFNPSIvdXNyL2Jpbi9sc2JsayAtcm5vIEZTVFlQRSxNT1VOVFBPSU5ULE5BTUUgL2Rldi8layIsIFJFU1VMVCE9IipTV0FQKiIsIEFUVFJ7cXVldWUvc2NoZWR1bGVyfT0iZGVhZGxpbmUiLCBBVFRSe3F1ZXVlL25yX3JlcXVlc3RzfT0iMjU2IiwgQVRUUntkZXZpY2UvcXVldWVfZGVwdGh9PSIzMSIsIEFUVFJ7cXVldWUvbWF4X3NlY3RvcnNfa2J9PSI4MTkyIiwgQVRUUntxdWV1ZS9yZWFkX2FoZWFkX2tifT0iMCIsIEFUVFJ7cXVldWUvcnFfYWZmaW5pdHl9PSIyIgonID4gL2V0Yy91ZGV2L3J1bGVzLmQvOTktaWJtLXNwZWN0cnVtLXNjYWxlLnJ1bGVzCiMgUnVuIHRoaXMgdG8gbG9hZCB0aGUgcnVsZXMKdWRldmFkbSBjb250cm9sIC0tcmVsb2FkLXJ1bGVzICYmIHVkZXZhZG0gdHJpZ2dlcgoKCmZpCgpjZCAtCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyBPUyBQZXJmb3JtYW5jZSB0dW5pbmcgLSBFTkQKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgoKCgoKY3AgL2V0Yy9zc2gvc3NoZF9jb25maWcgL2V0Yy9zc2gvc3NoZF9jb25maWcuYmFja3VwCnNlZCAtaSAncy8jUGVybWl0Um9vdExvZ2luIHllcy9QZXJtaXRSb290TG9naW4geWVzL2cnIC9ldGMvc3NoL3NzaGRfY29uZmlnCiNzZXJ2aWNlIHNzaGQgcmVzdGFydAoKCm12IC9yb290Ly5zc2gvYXV0aG9yaXplZF9rZXlzIC9yb290Ly5zc2gvYXV0aG9yaXplZF9rZXlzLmJhY2t1cApjcCAvaG9tZS9vcGMvLnNzaC9hdXRob3JpemVkX2tleXMgL3Jvb3QvLnNzaC9hdXRob3JpemVkX2tleXMKCmNkIC9yb290Ly5zc2gvOyBjYXQgaWRfcnNhLnB1YiA+PiBhdXRob3JpemVkX2tleXMgOyBjZCAtIAoKc2Vjb25kTklDRG9tYWluTmFtZT0ke3RoaXNGUUROIyouKn0KZWNobyAiRG9pbmcgbnNsb29rdXAgZm9yIG5vZGVzIgpjdD0xCmlmIFsgJG5zZE5vZGVDb3VudCAtZ3QgMCBdOyB0aGVuCiAgICAgICAgd2hpbGUgWyAkY3QgLWxlICRuc2ROb2RlQ291bnQgXTsgZG8KICAgICAgICAgICAgICAgIG5zbGs9YG5zbG9va3VwICRuc2ROb2RlSG9zdG5hbWVQcmVmaXgke2N0fS4kc2Vjb25kTklDRG9tYWluTmFtZWAKICAgICAgICAgICAgICAgIG5zX2NrPWBlY2hvIC1lICQ/YAogICAgICAgICAgICAgICAgaWYgWyAkbnNfY2sgPSAwIF07IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaG5hbWU9YG5zbG9va3VwICRuc2ROb2RlSG9zdG5hbWVQcmVmaXgke2N0fS4kc2Vjb25kTklDRG9tYWluTmFtZSB8IGdyZXAgTmFtZSB8IGdhd2sgJ3twcmludCAkMn0nYAogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIkaG5hbWUiID4+IC90bXAvbnNkbm9kZWhvc3RzOwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIkaG5hbWUiID4+IC90bXAvYWxsbm9kZWhvc3RzOwogICAgICAgICAgICAgICAgICAgICAgICBjdD0kKChjdCsxKSk7CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICMgc2xlZXAgMTAgc2Vjb25kcyBhbmQgY2hlY2sgYWdhaW4gLSBpbmZpbml0ZSBsb29wCiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIlNsZWVwaW5nIGZvciAxMCBzZWNzIGFuZCB3aWxsIGNoZWNrIGFnYWluIGZvciBuc2xvb2t1cCAkbnNkTm9kZUhvc3RuYW1lUHJlZml4JHtjdH0uJHNlY29uZE5JQ0RvbWFpbk5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIHNsZWVwIDEwCiAgICAgICAgICAgICAgICBmaQogICAgICAgIGRvbmU7CiAgICAgICAgZWNobyAiRm91bmQgYGNhdCAvdG1wL25zZG5vZGVob3N0cyB8IHdjIC1sYCBub2RlcyI7CiAgICAgICAgZWNobyBgY2F0IC90bXAvbnNkbm9kZWhvc3RzYDsKZWxzZQogICAgICAgIGVjaG8gIm5vIHNlcnZlciBub2RlcyBjb25maWd1cmVkIgpmaQoKCmVjaG8gIkRvaW5nIG5zbG9va3VwIGZvciBub2RlcyIKY3Q9MTsKaWYgWyAkY2xpZW50Tm9kZUNvdW50IC1ndCAwIF07IHRoZW4KICAgICAgICB3aGlsZSBbICRjdCAtbGUgJGNsaWVudE5vZGVDb3VudCBdOyBkbwogICAgICAgICAgICAgICAgbnNsaz1gbnNsb29rdXAgJGNsaWVudE5vZGVIb3N0bmFtZVByZWZpeCRjdGAKICAgICAgICAgICAgICAgIG5zX2NrPWBlY2hvIC1lICQ/YAogICAgICAgICAgICAgICAgaWYgWyAkbnNfY2sgPSAwIF07IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaG5hbWU9YG5zbG9va3VwICRjbGllbnROb2RlSG9zdG5hbWVQcmVmaXgkY3QgfCBncmVwIE5hbWUgfCBnYXdrICd7cHJpbnQgJDJ9J2AKICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiJGhuYW1lIiA+PiAvdG1wL2NsaWVudG5vZGVob3N0czsKICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiJGhuYW1lIiA+PiAvdG1wL2FsbG5vZGVob3N0czsKICAgICAgICAgICAgICAgICAgICAgICAgY3Q9JCgoY3QrMSkpOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAjIHNsZWVwIDEwIHNlY29uZHMgYW5kIGNoZWNrIGFnYWluIC0gaW5maW5pdGUgbG9vcAogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICJTbGVlcGluZyBmb3IgMTAgc2VjcyBhbmQgd2lsbCBjaGVjayBhZ2FpbiBmb3IgbnNsb29rdXAgJGNsaWVudE5vZGVIb3N0bmFtZVByZWZpeCRjdCIKICAgICAgICAgICAgICAgICAgICAgICAgc2xlZXAgMTAKICAgICAgICAgICAgICAgIGZpCiAgICAgICAgZG9uZTsKICAgICAgICBlY2hvICJGb3VuZCBgY2F0IC90bXAvY2xpZW50bm9kZWhvc3RzIHwgd2MgLWxgIG5vZGVzIjsKICAgICAgICBlY2hvIGBjYXQgL3RtcC9jbGllbnRub2RlaG9zdHNgOwplbHNlCiAgICAgICAgZWNobyAibm8gY29tcHV0ZSBub2RlcyBjb25maWd1cmVkIgpmaQoKCgppZiBbICEgLWYgfi8uc3NoL2tub3duX2hvc3RzIF07IHRoZW4KICAgICAgICB0b3VjaCB+Ly5zc2gva25vd25faG9zdHMKZmkKCgoKCmVjaG8gIiR0aGlzSG9zdCIgfCBncmVwIC1xICRuc2ROb2RlSG9zdG5hbWVQcmVmaXgKaWYgWyAkPyAtZXEgMCBdIDsgdGhlbgoKICAjIFdhaXQgZm9yIG11bHRpLWF0dGFjaCBvZiB0aGUgQmxvY2sgdm9sdW1lcyB0byBjb21wbGV0ZS4gIE9ubHkgd2F5IHRvIGRvIHRoYXQgaXMgdmlhIE9DSSBDTEkgcHJldmlldyB0b29sIHZlcnNpb24gd2hpY2ggaXMgY2FsbGVkIGZyb20gVGVycmFmb3JtIHNjcmlwdHMuICBJdCB0aGVuIGNyZWF0ZXMgdGhlIGJlbG93IGZpbGUgb24gYWxsIG5vZGVzIG9mIHRoZSBjbHVzdGVyLgogIHdoaWxlIFsgISAtZiAvdG1wL211bHRpLWF0dGFjaC5jb21wbGV0ZSBdCiAgZG8KICAgIHNsZWVwIDYwcwogICAgZWNobyAiV2FpdGluZyBmb3IgbXVsdGktYXR0YWNoIHZpYSBvY2ktY2xpIHRvICBjb21wbGV0ZSAuLi4iCiAgZG9uZQpmaSAKCiMjIFN0YXJ0IFNTSEQgdG8gcHJldmVudCByZW1vdGUgZXhlY3V0aW9uIGR1cmluZyB0aGlzIHByb2Nlc3MKc3lzdGVtY3RsIHN0YXR1cyBzc2hkCnN5c3RlbWN0bCBzdG9wIHNzaGQKc3lzdGVtY3RsIHN0YXR1cyBzc2hkCgoKIyBSdW4gdGhlIGlzY3NpIGNvbW1hbmRzCiMgaXNjc2lhZG0gZGlzY292ZXJ5L2xvZ2luCiMgbG9vcCBvdmVyIHZhcmlvdXMgaXAncyBidXQgbmVlZHMgdG8gb25seSBhdHRlbXB0IGRpc2tzIHRoYXQgYWN0dWFsbHkKIyBkby93aWxsIGV4aXN0LgplY2hvICIkdGhpc0hvc3QiIHwgZ3JlcCAtcSAkbnNkTm9kZUhvc3RuYW1lUHJlZml4CmlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KCiAgICBpZiBbICRibG9ja1ZvbHVtZXNQZXJQb29sIC1ndCAwIF0gOwogICAgdGhlbgogICAgICBlY2hvICJOdW1iZXIgb2YgZGlza3MgOiAkYmxvY2tWb2x1bWVzUGVyUG9vbCIKICAgICAgZm9yIG4gaW4gYHNlcSAyICQoKGJsb2NrVm9sdW1lc1BlclBvb2wrMSkpYDsgZG8KICAgICAgICBlY2hvICJEaXNrICQoKG4tMikpLCBhdHRlbXB0aW5nIGlzY3NpIGRpc2NvdmVyeS9sb2dpbiBvZiAxNjkuMjU0LjIuJG4gLi4uIgogICAgICAgIHN1Y2Nlc3M9MQogICAgICAgIHdoaWxlIFtbICRzdWNjZXNzIC1lcSAxIF1dOyBkbwogICAgICAgICAgaXFuPSQoaXNjc2lhZG0gLW0gZGlzY292ZXJ5IC10IHNlbmR0YXJnZXRzIC1wIDE2OS4yNTQuMi4kbjozMjYwIHwgYXdrICd7cHJpbnQgJDJ9JykKICAgICAgICAgIGlmICBbWyAkaXFuICE9IGlxbi4qIF1dIDsKICAgICAgICAgIHRoZW4KICAgICAgICAgICAgZWNobyAiRXJyb3I6IHVuZXhwZWN0ZWQgaXFuIHZhbHVlOiAkaXFuIgogICAgICAgICAgICBzbGVlcCAxMHMKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAiU3VjY2VzcyBmb3IgaXFuOiAkaXFuIgogICAgICAgICAgICBzdWNjZXNzPTAKICAgICAgICAgIGZpCiAgICAgICAgZG9uZQogICAgICAgIGlzY3NpYWRtIC1tIG5vZGUgLW8gdXBkYXRlIC1UICRpcW4gLW4gbm9kZS5zdGFydHVwIC12IGF1dG9tYXRpYwogICAgICAgIGlzY3NpYWRtIC1tIG5vZGUgLVQgJGlxbiAtcCAxNjkuMjU0LjIuJG46MzI2MCAtbAogICAgICBkb25lCiAgICBlbHNlCiAgICAgIGVjaG8gIlplcm8gYmxvY2sgdm9sdW1lcywgbm90IGNhbGxpbmcgaXNjc2lhZG0sIFRvdGFsIERpc2sgQ291bnQ6ICRibG9ja1ZvbHVtZXNQZXJQb29sIgogICAgZmkKICAgICMgQ3JlYXRlIHRoaXMgZmlsZSBmb3IgVEYgc2NyaXB0IHRvIHByb2NlZWQgd2l0aCBuZXh0IHN0ZXBzCiAgICB0b3VjaCAvdG1wL211bHRpLWF0dGFjaC1pc2NzaS5jb21wbGV0ZQpmaQoKCgplY2hvICIkdGhpc0hvc3QiIHwgZ3JlcCAtcSAkbnNkTm9kZUhvc3RuYW1lUHJlZml4CmlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICAjIFJ1biBvbiBhbGwgc2VydmVyIG5vZGVzCiAgIyBUbyBlbmFibGUgY3VzdG9tIGRpc2sgY29uc2lzdGVudCBkZXZpY2VwYXRoIGRpc2NvdmVyeSBmb3IgbnNkcy4KICBta2RpciAtcCAvdmFyL21tZnMvZXRjLwogIGlmIFsgLWYgL3RtcC9uc2RkZXZpY2VzIF07IHRoZW4KICAgIGNwIC90bXAvbnNkZGV2aWNlcyAvdmFyL21tZnMvZXRjLwogICAgY2htb2QgK3ggL3Zhci9tbWZzL2V0Yy9uc2RkZXZpY2VzCiAgZWxzZSAKICAgIGV4aXQgMQogIGZpCmZpCgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyBkb3dubG9hZCBzcGVjdHJ1bSBzY2FsZSAjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwpjZCAvdG1wLwpjdXJsIC1PICRkb3dubG9hZFVybCAtcwoKIyBsb2dpYyB0byBlbnN1cmUgaWYgZG93bmxvYWQgZmFpbHMgZHVlIHRvIGludGVybWl0dGVudCBlcnJvciwgaXQgcmUtZG93bmxvYWRzLgp3aGlsZSBbICQ/IC1uZSAwIF07IGRvCiAgcm0gLXJmIC90bXAvU3BlY3RydW1fU2NhbGVfRGF0YV9NYW5hZ2VtZW50LSoKICBjdXJsIC1PICRkb3dubG9hZFVybCAtcwpkb25lCgp3aGlsZSBbICEgLWYgL3RtcC9TcGVjdHJ1bV9TY2FsZV9EYXRhX01hbmFnZW1lbnQtJHt2ZXJzaW9ufS14ODZfNjQtTGludXgtaW5zdGFsbCBdOwpkbwogIHNsZWVwIDVzCiAgZWNobyAiV2FpdGluZyBmb3IgZmlsZSB0byBkb3dubG9hZCIKZG9uZQoKCmNobW9kICt4IFNwZWN0cnVtX1NjYWxlX0RhdGFfTWFuYWdlbWVudC0ke3ZlcnNpb259LXg4Nl82NC1MaW51eC1pbnN0YWxsCi4vU3BlY3RydW1fU2NhbGVfRGF0YV9NYW5hZ2VtZW50LSR7dmVyc2lvbn0teDg2XzY0LUxpbnV4LWluc3RhbGwgLS1zaWxlbnQKCmVjaG8gIiR2ZXJzaW9uIiA+IC9ldGMveXVtL3ZhcnMvc3BlY19zY2FsZV92ZXIKCmVjaG8gJ1tzcGVjdHJ1bV9zY2FsZS1ncGZzXQpuYW1lID0gU3BlY3RydW0gU2NhbGUgLSBHUEZTCmJhc2V1cmwgPSBmaWxlOi8vL3Vzci9scHAvbW1mcy8kc3BlY19zY2FsZV92ZXIvZ3Bmc19ycG1zCmdwZ2NoZWNrPTAKZW5hYmxlZD0xCltzcGVjdHJ1bV9zY2FsZS1ncGZzLW9wdGlvbmFsXQpuYW1lID0gU3BlY3RydW0gU2NhbGUgLSBHUEZTCmJhc2V1cmwgPSBmaWxlOi8vL3Vzci9scHAvbW1mcy8kc3BlY19zY2FsZV92ZXIvZ3Bmc19ycG1zL3JoZWw3CmdwZ2NoZWNrPTAKZW5hYmxlZD0xCltzcGVjdHJ1bV9zY2FsZS1nYW5lc2hhXQpuYW1lID0gU3BlY3RydW0gU2NhbGUgLSBORlMtR2FuZXNoYQpiYXNldXJsID0gZmlsZTovLy91c3IvbHBwL21tZnMvJHNwZWNfc2NhbGVfdmVyL2dhbmVzaGFfcnBtcy9yaGVsNwpncGdjaGVjaz0wCmVuYWJsZWQ9MQpbc3BlY3RydW1fc2NhbGUtc21iXQpuYW1lID0gU3BlY3RydW0gU2NhbGUgLSBTTUIKYmFzZXVybCA9IGZpbGU6Ly8vdXNyL2xwcC9tbWZzLyRzcGVjX3NjYWxlX3Zlci9zbWJfcnBtcy9yaGVsNwpncGdjaGVjaz0wCmVuYWJsZWQ9MQpbc3BlY3RydW1fc2NhbGUtb2JqZWN0XQpuYW1lID0gU3BlY3RydW0gU2NhbGUgLSBPYmplY3QKYmFzZXVybCA9IGZpbGU6Ly8vdXNyL2xwcC9tbWZzLyRzcGVjX3NjYWxlX3Zlci9vYmplY3RfcnBtcy9yaGVsNwpncGdjaGVjaz0wCmVuYWJsZWQ9MQpbc3BlY3RydW1fc2NhbGUtemltb25dCm5hbWUgPSBTcGVjdHJ1bSBTY2FsZSAtIFppbW9uCmJhc2V1cmwgPSBmaWxlOi8vL3Vzci9scHAvbW1mcy8kc3BlY19zY2FsZV92ZXIvemltb25fcnBtcy9yaGVsNwpncGdjaGVjaz0wCmVuYWJsZWQ9MScgPiAvZXRjL3l1bS5yZXBvcy5kL3NwZWN0cnVtLXNjYWxlLnJlcG8KCgp5dW0gY2xlYW4gYWxsCnl1bSBtYWtlY2FjaGUKeXVtIC15IGluc3RhbGwga2VybmVsLWRldmVsIGNwcCBnY2MgZ2NjLWMrKyBiaW51dGlscyBrZXJuZWwtaGVhZGVycwp5dW0gLXkgaW5zdGFsbCBwc21pc2MgbnVtYWQgbnVtYWN0bCBpcGVyZjMgZHN0YXQgaXByb3V0ZSBhdXRvbWFrZSBhdXRvY29uZiBnaXQKeXVtIC15IHVwZGF0ZQoKIyBGb3IgR1VJIG5vZGU6CiN5dW0gLXkgaW5zdGFsbCBncGZzLmJhc2UgZ3Bmcy5ncGwgZ3Bmcy5tc2cuZW5fVVMgZ3Bmcy5nc2tpdCBncGZzLmxpY2Vuc2UqIGdwZnMuZXh0IGdwZnMuY3J5cHRvIGdwZnMuY29tcHJlc3Npb24gZ3Bmcy5hZHYgZ3Bmcy5nc3MucG1zZW5zb3JzIGdwZnMuZG9jcyBncGZzLmphdmEgZ3Bmcy5rYWZrYSBncGZzLmxpYnJka2Fma2EgZ3Bmcy5ndWkgZ3Bmcy5nc3MucG1jb2xsZWN0b3IKCiMgRm9yIG5vbi1HVUkgbm9kZToKeXVtIC15IGluc3RhbGwgZ3Bmcy5iYXNlIGdwZnMuZ3BsIGdwZnMubXNnLmVuX1VTIGdwZnMuZ3NraXQgZ3Bmcy5saWNlbnNlKiBncGZzLmV4dCBncGZzLmNyeXB0byBncGZzLmNvbXByZXNzaW9uIGdwZnMuYWR2IGdwZnMuZ3NzLnBtc2Vuc29ycyBncGZzLmRvY3MgZ3Bmcy5qYXZhIGdwZnMua2Fma2EgZ3Bmcy5saWJyZGthZmthCgpzZWQgLWkgJy9kaXN0cm92ZXJwa2cvYSBleGNsdWRlPWtlcm5lbConIC9ldGMveXVtLmNvbmYKCgplY2hvICJjbG91ZC1pbml0IGNvbXBsZXRlIgp0b3VjaCAvdG1wL2Nsb3VkX2luaXQuY29tcGxldGUKCnJlYm9vdAoKCg==" [33m->[0m [0m""
        }
      [33m~[0m [0m[1m[0mprivate_ip[0m[0m                          = "10.0.6.4" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mpublic_ip[0m[0m                           = (known after apply)
      [33m~[0m [0m[1m[0mregion[0m[0m                              = "phx" [33m->[0m [0m(known after apply)
        [1m[0mshape[0m[0m                               = "VM.DenseIO2.24"
      [33m~[0m [0m[1m[0mstate[0m[0m                               = "RUNNING" [33m->[0m [0m(known after apply)
        [1m[0msubnet_id[0m[0m                           = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q"
      [33m~[0m [0m[1m[0mtime_created[0m[0m                        = "2019-09-17 00:13:47.364 +0000 UTC" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mtime_maintenance_reboot_due[0m[0m         = (known after apply)

      [33m~[0m [0magent_config {
          [33m~[0m [0m[1m[0mis_monitoring_disabled[0m[0m = false [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0mcreate_vnic_details {
          [33m~[0m [0m[1m[0massign_public_ip[0m[0m       = "false" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdisplay_name[0m[0m           = "ss-compute-3" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mhostname_label[0m[0m         = "ss-compute-3" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mnsg_ids[0m[0m                = [] [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.6.4" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mskip_source_dest_check[0m[0m = false [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q" [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0msource_details {
          [33m~[0m [0m[1m[0mboot_volume_size_in_gbs[0m[0m = "47" [33m->[0m [0m(known after apply)
          [32m+[0m [0m[1m[0mkms_key_id[0m[0m              = (known after apply)
            [1m[0msource_id[0m[0m               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq"
            [1m[0msource_type[0m[0m             = "image"
        }

        timeouts {
            [1m[0mcreate[0m[0m = "120m"
        }
    }

[1m  # oci_core_instance.client_node[3][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_instance" "client_node" {
        [1m[0mavailability_domain[0m[0m                 = "vemA:PHX-AD-3"
      [33m~[0m [0m[1m[0mboot_volume_id[0m[0m                      = "ocid1.bootvolume.oc1.phx.abyhqljtjxuc7frufnd47v2c7rxpq56sxshup73yyub2ushnm4tqgwsgnckq" [33m->[0m [0m(known after apply)
        [1m[0mcompartment_id[0m[0m                      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
      [33m~[0m [0m[1m[0mdefined_tags[0m[0m                        = {} [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m                        = "ss-compute-4"
      [33m~[0m [0m[1m[0mfault_domain[0m[0m                        = "FAULT-DOMAIN-3" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mfreeform_tags[0m[0m                       = {} [33m->[0m [0m(known after apply)
        [1m[0mhostname_label[0m[0m                      = "ss-compute-4"
      [33m~[0m [0m[1m[0mid[0m[0m                                  = "ocid1.instance.oc1.phx.abyhqljtfti4lgav5ncigrdn545jmsxvzthlownb2marzzrl2fo2k5t2kktq" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mimage[0m[0m                               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mipxe_script[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mis_pv_encryption_in_transit_enabled[0m[0m = (known after apply)
      [33m~[0m [0m[1m[0mlaunch_mode[0m[0m                         = "NATIVE" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mlaunch_options[0m[0m                      = [
          [31m-[0m [0m{
              [31m-[0m [0mboot_volume_type                    = "PARAVIRTUALIZED"
              [31m-[0m [0mfirmware                            = "UEFI_64"
              [31m-[0m [0mis_consistent_volume_naming_enabled = true
              [31m-[0m [0mis_pv_encryption_in_transit_enabled = true
              [31m-[0m [0mnetwork_type                        = "VFIO"
              [31m-[0m [0mremote_data_volume_type             = "PARAVIRTUALIZED"
            },
        ] [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mmetadata[0m[0m                            = { [31m# forces replacement[0m[0m
            "ssh_authorized_keys" = "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAyqqHqxX/DQB7bAU9De/Eq096y8kvGhs41kOnFAF+Mx0qhHuvEx8PVpr3zLNvpKnUmHfMCgdZyBtgbWZrb/Z5w8wKOMFj79UvFz7onlozMshRXMDcnNIu4gSMri5vzS/FjVLt/ku95uuVkML+vvAWnb+FdXOEqBeTQ7L9Zk4YsTCR39+7BNxZ4rSA9i2tCx9XD7fzLKBVuAMnelXzH4Hi2VIsJzzyakKn96faUrIKJuxgOCE9o1eHosyo1wq5i7HQw17LMlSkjamoIyWyYROXBreuIdWh5EdfQuH5Fwjwa9eY7bub+TYWYt8DgNP7d+/W7/OOXex1Y9oLsAetoxOEzw== rsa-key-20180822"
          [33m~[0m [0m"user_data"           = "" [33m->[0m [0m""
        }
      [33m~[0m [0m[1m[0mprivate_ip[0m[0m                          = "10.0.6.3" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mpublic_ip[0m[0m                           = (known after apply)
      [33m~[0m [0m[1m[0mregion[0m[0m                              = "phx" [33m->[0m [0m(known after apply)
        [1m[0mshape[0m[0m                               = "VM.DenseIO2.24"
      [33m~[0m [0m[1m[0mstate[0m[0m                               = "RUNNING" [33m->[0m [0m(known after apply)
        [1m[0msubnet_id[0m[0m                           = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q"
      [33m~[0m [0m[1m[0mtime_created[0m[0m                        = "2019-09-17 00:09:49.487 +0000 UTC" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mtime_maintenance_reboot_due[0m[0m         = (known after apply)

      [33m~[0m [0magent_config {
          [33m~[0m [0m[1m[0mis_monitoring_disabled[0m[0m = false [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0mcreate_vnic_details {
          [33m~[0m [0m[1m[0massign_public_ip[0m[0m       = "false" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdisplay_name[0m[0m           = "ss-compute-4" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mhostname_label[0m[0m         = "ss-compute-4" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mnsg_ids[0m[0m                = [] [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.6.3" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mskip_source_dest_check[0m[0m = false [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q" [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0msource_details {
          [33m~[0m [0m[1m[0mboot_volume_size_in_gbs[0m[0m = "47" [33m->[0m [0m(known after apply)
          [32m+[0m [0m[1m[0mkms_key_id[0m[0m              = (known after apply)
            [1m[0msource_id[0m[0m               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq"
            [1m[0msource_type[0m[0m             = "image"
        }

        timeouts {
            [1m[0mcreate[0m[0m = "120m"
        }
    }

[1m  # oci_core_instance.nsd_node[0][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_instance" "nsd_node" {
        [1m[0mavailability_domain[0m[0m                 = "vemA:PHX-AD-3"
      [33m~[0m [0m[1m[0mboot_volume_id[0m[0m                      = "ocid1.bootvolume.oc1.phx.abyhqljtanm2vx2ywfpxd6dxmdvmroaxhjtert2ahzp4jnlayovklgmf3m6q" [33m->[0m [0m(known after apply)
        [1m[0mcompartment_id[0m[0m                      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
      [33m~[0m [0m[1m[0mdefined_tags[0m[0m                        = {} [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m                        = "ss-server-nic0-1"
      [33m~[0m [0m[1m[0mfault_domain[0m[0m                        = "FAULT-DOMAIN-2" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mfreeform_tags[0m[0m                       = {} [33m->[0m [0m(known after apply)
        [1m[0mhostname_label[0m[0m                      = "ss-server-nic0-1"
      [33m~[0m [0m[1m[0mid[0m[0m                                  = "ocid1.instance.oc1.phx.abyhqljtilwqmibvupgziq2lmlwpg2igq3pd3t44d7z5lmrx77wx55ttpgqq" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mimage[0m[0m                               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mipxe_script[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mis_pv_encryption_in_transit_enabled[0m[0m = (known after apply)
      [33m~[0m [0m[1m[0mlaunch_mode[0m[0m                         = "NATIVE" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mlaunch_options[0m[0m                      = [
          [31m-[0m [0m{
              [31m-[0m [0mboot_volume_type                    = "ISCSI"
              [31m-[0m [0mfirmware                            = "UEFI_64"
              [31m-[0m [0mis_consistent_volume_naming_enabled = true
              [31m-[0m [0mis_pv_encryption_in_transit_enabled = true
              [31m-[0m [0mnetwork_type                        = "VFIO"
              [31m-[0m [0mremote_data_volume_type             = "ISCSI"
            },
        ] [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mmetadata[0m[0m                            = { [31m# forces replacement[0m[0m
            "ssh_authorized_keys" = "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAyqqHqxX/DQB7bAU9De/Eq096y8kvGhs41kOnFAF+Mx0qhHuvEx8PVpr3zLNvpKnUmHfMCgdZyBtgbWZrb/Z5w8wKOMFj79UvFz7onlozMshRXMDcnNIu4gSMri5vzS/FjVLt/ku95uuVkML+vvAWnb+FdXOEqBeTQ7L9Zk4YsTCR39+7BNxZ4rSA9i2tCx9XD7fzLKBVuAMnelXzH4Hi2VIsJzzyakKn96faUrIKJuxgOCE9o1eHosyo1wq5i7HQw17LMlSkjamoIyWyYROXBreuIdWh5EdfQuH5Fwjwa9eY7bub+TYWYt8DgNP7d+/W7/OOXex1Y9oLsAetoxOEzw== rsa-key-20180822"
          [33m~[0m [0m"user_data"           = "" [33m->[0m [0m""
        }
      [33m~[0m [0m[1m[0mprivate_ip[0m[0m                          = "10.0.3.3" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mpublic_ip[0m[0m                           = (known after apply)
      [33m~[0m [0m[1m[0mregion[0m[0m                              = "phx" [33m->[0m [0m(known after apply)
        [1m[0mshape[0m[0m                               = "BM.DenseIO2.52"
      [33m~[0m [0m[1m[0mstate[0m[0m                               = "RUNNING" [33m->[0m [0m(known after apply)
        [1m[0msubnet_id[0m[0m                           = "ocid1.subnet.oc1.phx.aaaaaaaaijglqbq2fhov5mdtkzupzha6agv3unoayq6rwsn3pezaqcll6hoq"
      [33m~[0m [0m[1m[0mtime_created[0m[0m                        = "2019-09-17 00:12:13.468 +0000 UTC" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mtime_maintenance_reboot_due[0m[0m         = (known after apply)

      [33m~[0m [0magent_config {
          [33m~[0m [0m[1m[0mis_monitoring_disabled[0m[0m = false [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0mcreate_vnic_details {
          [33m~[0m [0m[1m[0massign_public_ip[0m[0m       = "false" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdisplay_name[0m[0m           = "ss-server-nic0-1" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mhostname_label[0m[0m         = "ss-server-nic0-1" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mnsg_ids[0m[0m                = [] [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.3.3" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mskip_source_dest_check[0m[0m = false [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaaijglqbq2fhov5mdtkzupzha6agv3unoayq6rwsn3pezaqcll6hoq" [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0msource_details {
          [33m~[0m [0m[1m[0mboot_volume_size_in_gbs[0m[0m = "47" [33m->[0m [0m(known after apply)
          [32m+[0m [0m[1m[0mkms_key_id[0m[0m              = (known after apply)
            [1m[0msource_id[0m[0m               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq"
            [1m[0msource_type[0m[0m             = "image"
        }

        timeouts {
            [1m[0mcreate[0m[0m = "120m"
        }
    }

[1m  # oci_core_instance.nsd_node[1][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_instance" "nsd_node" {
        [1m[0mavailability_domain[0m[0m                 = "vemA:PHX-AD-3"
      [33m~[0m [0m[1m[0mboot_volume_id[0m[0m                      = "ocid1.bootvolume.oc1.phx.abyhqljttlx2tqtinaz5mb5fu5fdmhoskextpcj7oc5zjagro64xljueateq" [33m->[0m [0m(known after apply)
        [1m[0mcompartment_id[0m[0m                      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
      [33m~[0m [0m[1m[0mdefined_tags[0m[0m                        = {} [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m                        = "ss-server-nic0-2"
      [33m~[0m [0m[1m[0mfault_domain[0m[0m                        = "FAULT-DOMAIN-2" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mfreeform_tags[0m[0m                       = {} [33m->[0m [0m(known after apply)
        [1m[0mhostname_label[0m[0m                      = "ss-server-nic0-2"
      [33m~[0m [0m[1m[0mid[0m[0m                                  = "ocid1.instance.oc1.phx.abyhqljtkvqhtcd2qyx6mrdsv3jqkoxdzpyo53b7upqpfd7ywbudr7jg72na" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mimage[0m[0m                               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mipxe_script[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mis_pv_encryption_in_transit_enabled[0m[0m = (known after apply)
      [33m~[0m [0m[1m[0mlaunch_mode[0m[0m                         = "NATIVE" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mlaunch_options[0m[0m                      = [
          [31m-[0m [0m{
              [31m-[0m [0mboot_volume_type                    = "ISCSI"
              [31m-[0m [0mfirmware                            = "UEFI_64"
              [31m-[0m [0mis_consistent_volume_naming_enabled = true
              [31m-[0m [0mis_pv_encryption_in_transit_enabled = true
              [31m-[0m [0mnetwork_type                        = "VFIO"
              [31m-[0m [0mremote_data_volume_type             = "ISCSI"
            },
        ] [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mmetadata[0m[0m                            = { [31m# forces replacement[0m[0m
            "ssh_authorized_keys" = "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAyqqHqxX/DQB7bAU9De/Eq096y8kvGhs41kOnFAF+Mx0qhHuvEx8PVpr3zLNvpKnUmHfMCgdZyBtgbWZrb/Z5w8wKOMFj79UvFz7onlozMshRXMDcnNIu4gSMri5vzS/FjVLt/ku95uuVkML+vvAWnb+FdXOEqBeTQ7L9Zk4YsTCR39+7BNxZ4rSA9i2tCx9XD7fzLKBVuAMnelXzH4Hi2VIsJzzyakKn96faUrIKJuxgOCE9o1eHosyo1wq5i7HQw17LMlSkjamoIyWyYROXBreuIdWh5EdfQuH5Fwjwa9eY7bub+TYWYt8DgNP7d+/W7/OOXex1Y9oLsAetoxOEzw== rsa-key-20180822"
          [33m~[0m [0m"user_data"           = "" [33m->[0m [0m""
        }
      [33m~[0m [0m[1m[0mprivate_ip[0m[0m                          = "10.0.3.5" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mpublic_ip[0m[0m                           = (known after apply)
      [33m~[0m [0m[1m[0mregion[0m[0m                              = "phx" [33m->[0m [0m(known after apply)
        [1m[0mshape[0m[0m                               = "BM.DenseIO2.52"
      [33m~[0m [0m[1m[0mstate[0m[0m                               = "RUNNING" [33m->[0m [0m(known after apply)
        [1m[0msubnet_id[0m[0m                           = "ocid1.subnet.oc1.phx.aaaaaaaaijglqbq2fhov5mdtkzupzha6agv3unoayq6rwsn3pezaqcll6hoq"
      [33m~[0m [0m[1m[0mtime_created[0m[0m                        = "2019-09-17 00:15:52.26 +0000 UTC" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mtime_maintenance_reboot_due[0m[0m         = (known after apply)

      [33m~[0m [0magent_config {
          [33m~[0m [0m[1m[0mis_monitoring_disabled[0m[0m = false [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0mcreate_vnic_details {
          [33m~[0m [0m[1m[0massign_public_ip[0m[0m       = "false" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdisplay_name[0m[0m           = "ss-server-nic0-2" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mhostname_label[0m[0m         = "ss-server-nic0-2" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mnsg_ids[0m[0m                = [] [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.3.5" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mskip_source_dest_check[0m[0m = false [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaaijglqbq2fhov5mdtkzupzha6agv3unoayq6rwsn3pezaqcll6hoq" [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0msource_details {
          [33m~[0m [0m[1m[0mboot_volume_size_in_gbs[0m[0m = "47" [33m->[0m [0m(known after apply)
          [32m+[0m [0m[1m[0mkms_key_id[0m[0m              = (known after apply)
            [1m[0msource_id[0m[0m               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq"
            [1m[0msource_type[0m[0m             = "image"
        }

        timeouts {
            [1m[0mcreate[0m[0m = "120m"
        }
    }

[1m  # oci_core_instance.nsd_node[2][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_instance" "nsd_node" {
        [1m[0mavailability_domain[0m[0m                 = "vemA:PHX-AD-3"
      [33m~[0m [0m[1m[0mboot_volume_id[0m[0m                      = "ocid1.bootvolume.oc1.phx.abyhqljtq7vaxzi3yrenz55z3wtkjg65ngxfjscskhmb4nyjxlpjheqwkkjq" [33m->[0m [0m(known after apply)
        [1m[0mcompartment_id[0m[0m                      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
      [33m~[0m [0m[1m[0mdefined_tags[0m[0m                        = {} [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m                        = "ss-server-nic0-3"
      [33m~[0m [0m[1m[0mfault_domain[0m[0m                        = "FAULT-DOMAIN-2" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mfreeform_tags[0m[0m                       = {} [33m->[0m [0m(known after apply)
        [1m[0mhostname_label[0m[0m                      = "ss-server-nic0-3"
      [33m~[0m [0m[1m[0mid[0m[0m                                  = "ocid1.instance.oc1.phx.abyhqljtgjug2374vw2tqk3gymi5bxo6tcu34ibtdg3soizikt6wv7d3uwmq" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mimage[0m[0m                               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mipxe_script[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mis_pv_encryption_in_transit_enabled[0m[0m = (known after apply)
      [33m~[0m [0m[1m[0mlaunch_mode[0m[0m                         = "NATIVE" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mlaunch_options[0m[0m                      = [
          [31m-[0m [0m{
              [31m-[0m [0mboot_volume_type                    = "ISCSI"
              [31m-[0m [0mfirmware                            = "UEFI_64"
              [31m-[0m [0mis_consistent_volume_naming_enabled = true
              [31m-[0m [0mis_pv_encryption_in_transit_enabled = true
              [31m-[0m [0mnetwork_type                        = "VFIO"
              [31m-[0m [0mremote_data_volume_type             = "ISCSI"
            },
        ] [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mmetadata[0m[0m                            = { [31m# forces replacement[0m[0m
            "ssh_authorized_keys" = "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAyqqHqxX/DQB7bAU9De/Eq096y8kvGhs41kOnFAF+Mx0qhHuvEx8PVpr3zLNvpKnUmHfMCgdZyBtgbWZrb/Z5w8wKOMFj79UvFz7onlozMshRXMDcnNIu4gSMri5vzS/FjVLt/ku95uuVkML+vvAWnb+FdXOEqBeTQ7L9Zk4YsTCR39+7BNxZ4rSA9i2tCx9XD7fzLKBVuAMnelXzH4Hi2VIsJzzyakKn96faUrIKJuxgOCE9o1eHosyo1wq5i7HQw17LMlSkjamoIyWyYROXBreuIdWh5EdfQuH5Fwjwa9eY7bub+TYWYt8DgNP7d+/W7/OOXex1Y9oLsAetoxOEzw== rsa-key-20180822"
          [33m~[0m [0m"user_data"           = "" [33m->[0m [0m""
        }
      [33m~[0m [0m[1m[0mprivate_ip[0m[0m                          = "10.0.3.2" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mpublic_ip[0m[0m                           = (known after apply)
      [33m~[0m [0m[1m[0mregion[0m[0m                              = "phx" [33m->[0m [0m(known after apply)
        [1m[0mshape[0m[0m                               = "BM.DenseIO2.52"
      [33m~[0m [0m[1m[0mstate[0m[0m                               = "RUNNING" [33m->[0m [0m(known after apply)
        [1m[0msubnet_id[0m[0m                           = "ocid1.subnet.oc1.phx.aaaaaaaaijglqbq2fhov5mdtkzupzha6agv3unoayq6rwsn3pezaqcll6hoq"
      [33m~[0m [0m[1m[0mtime_created[0m[0m                        = "2019-09-17 00:08:45.222 +0000 UTC" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mtime_maintenance_reboot_due[0m[0m         = (known after apply)

      [33m~[0m [0magent_config {
          [33m~[0m [0m[1m[0mis_monitoring_disabled[0m[0m = false [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0mcreate_vnic_details {
          [33m~[0m [0m[1m[0massign_public_ip[0m[0m       = "false" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdisplay_name[0m[0m           = "ss-server-nic0-3" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mhostname_label[0m[0m         = "ss-server-nic0-3" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mnsg_ids[0m[0m                = [] [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.3.2" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mskip_source_dest_check[0m[0m = false [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaaijglqbq2fhov5mdtkzupzha6agv3unoayq6rwsn3pezaqcll6hoq" [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0msource_details {
          [33m~[0m [0m[1m[0mboot_volume_size_in_gbs[0m[0m = "47" [33m->[0m [0m(known after apply)
          [32m+[0m [0m[1m[0mkms_key_id[0m[0m              = (known after apply)
            [1m[0msource_id[0m[0m               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq"
            [1m[0msource_type[0m[0m             = "image"
        }

        timeouts {
            [1m[0mcreate[0m[0m = "120m"
        }
    }

[1m  # oci_core_instance.nsd_node[3][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_instance" "nsd_node" {
        [1m[0mavailability_domain[0m[0m                 = "vemA:PHX-AD-3"
      [33m~[0m [0m[1m[0mboot_volume_id[0m[0m                      = "ocid1.bootvolume.oc1.phx.abyhqljti22oehowopyzpyzobdhvfwascstbvw4leyaazqpgbyvi4epc6aia" [33m->[0m [0m(known after apply)
        [1m[0mcompartment_id[0m[0m                      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
      [33m~[0m [0m[1m[0mdefined_tags[0m[0m                        = {} [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m                        = "ss-server-nic0-4"
      [33m~[0m [0m[1m[0mfault_domain[0m[0m                        = "FAULT-DOMAIN-3" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mfreeform_tags[0m[0m                       = {} [33m->[0m [0m(known after apply)
        [1m[0mhostname_label[0m[0m                      = "ss-server-nic0-4"
      [33m~[0m [0m[1m[0mid[0m[0m                                  = "ocid1.instance.oc1.phx.abyhqljtvkytwjrxgws3hgkq2yb2ybaoiwsnmopw2zys62n42vcxnibupnva" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mimage[0m[0m                               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mipxe_script[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mis_pv_encryption_in_transit_enabled[0m[0m = (known after apply)
      [33m~[0m [0m[1m[0mlaunch_mode[0m[0m                         = "NATIVE" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mlaunch_options[0m[0m                      = [
          [31m-[0m [0m{
              [31m-[0m [0mboot_volume_type                    = "ISCSI"
              [31m-[0m [0mfirmware                            = "UEFI_64"
              [31m-[0m [0mis_consistent_volume_naming_enabled = true
              [31m-[0m [0mis_pv_encryption_in_transit_enabled = true
              [31m-[0m [0mnetwork_type                        = "VFIO"
              [31m-[0m [0mremote_data_volume_type             = "ISCSI"
            },
        ] [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mmetadata[0m[0m                            = { [31m# forces replacement[0m[0m
            "ssh_authorized_keys" = "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAyqqHqxX/DQB7bAU9De/Eq096y8kvGhs41kOnFAF+Mx0qhHuvEx8PVpr3zLNvpKnUmHfMCgdZyBtgbWZrb/Z5w8wKOMFj79UvFz7onlozMshRXMDcnNIu4gSMri5vzS/FjVLt/ku95uuVkML+vvAWnb+FdXOEqBeTQ7L9Zk4YsTCR39+7BNxZ4rSA9i2tCx9XD7fzLKBVuAMnelXzH4Hi2VIsJzzyakKn96faUrIKJuxgOCE9o1eHosyo1wq5i7HQw17LMlSkjamoIyWyYROXBreuIdWh5EdfQuH5Fwjwa9eY7bub+TYWYt8DgNP7d+/W7/OOXex1Y9oLsAetoxOEzw== rsa-key-20180822"
          [33m~[0m [0m"user_data"           = "" [33m->[0m [0m"IyEvdXNyL2Jpbi9lbnYgYmFzaApzZXQgLXgKdmVyc2lvbj0iNS4wLjMuMiIKZG93bmxvYWRVcmw9Imh0dHBzOi8vb2JqZWN0c3RvcmFnZS51cy1hc2hidXJuLTEub3JhY2xlY2xvdWQuY29tL3AvRExkci1Hd2ExdW9JX001YjNtVVdqdEVzdnlUTWlLeXNFNlNXOWNGa3EzNC9uL2hwYy9iL3NwZWN0cnVtX3NjYWxlL28vU3BlY3RydW1fU2NhbGVfRGF0YV9NYW5hZ2VtZW50LTUuMC4zLjIteDg2XzY0LUxpbnV4LWluc3RhbGwiCnNzaFByaXZhdGVLZXk9Ii0tLS0tQkVHSU4gUlNBIFBSSVZBVEUgS0VZLS0tLS0KTUlJRW9nSUJBQUtDQVFFQXlxcUhxeFgvRFFCN2JBVTlEZS9FcTA5Nnk4a3ZHaHM0MWtPbkZBRitNeDBxaEh1dgpFeDhQVnByM3pMTnZwS25VbUhmTUNnZFp5QnRnYldacmIvWjV3OHdLT01Gajc5VXZGejdvbmxvek1zaFJYTURjCm5OSXU0Z1NNcmk1dnpTL0ZqVkx0L2t1OTV1dVZrTUwrdnZBV25iK0ZkWE9FcUJlVFE3TDlaazRZc1RDUjM5KzcKQk54WjRyU0E5aTJ0Q3g5WEQ3ZnpMS0JWdUFNbmVsWHpINEhpMlZJc0p6enlha0tuOTZmYVVySUtKdXhnT0NFOQpvMWVIb3N5bzF3cTVpN0hRdzE3TE1sU2tqYW1vSXlXeVlST1hCcmV1SWRXaDVFZGZRdUg1Rndqd2E5ZVk3YnViCitUWVdZdDhEZ05QN2QrL1c3L09PWGV4MVk5b0xzQWV0b3hPRXp3SUJKUUtDQVFCdGpKeGNlcGUwQUVLMjdoTXEKSUwxVnJtdmp4ckd0UHlXa1FENmpCN25XY0tGY1hvZ21Bdk9Jd25nYm4wTkVRQi9qdG1CMEg2WW0rZ3FjQUFLNQpENXZEeUR6Z2FJa01CSWdvUGE0c0ZSVEJnUWxpa2NOYnIrSDlvWmdtelA0cHVQVXB5L1pFUko0QVIvM1J0WUxJCkV4TWsxanBOVXpMekU2bU1ZTUJTK2Nnb2JGR2o5T2ZqZFRobWRORG03NkNzQWxyNTFtQjRWOGtXdTZad1NJZTQKL0paOGNscGxSNjNjZ1hUWWgxay9xMnhheC9McllPZHFhMDVaK2UrSlE5ODlMb2pYc0NFalVOOEVHbHRjckRGRgpJVlExN3RHNDBqeEMwRHJYSmxsUmh1N1pCQlExWW93SDFhNlFZTVJ0cmhlanY2VGpPUnBDTDhkWWwvV2gvcXlBClMwQ05Bb0dCQU9nMzNzcXBVSmdrbE1IbEtlaERtdFRXZ29DK3JnVHRMZjYzeUVoeFlrcWFaSlAyYllobVJXaDIKTUhtUzEvYXZRbmZHTGd1MllDNzRHdndkOG9DUTgxSi9KWCtkYUxvVWhYUWJubmNFTjBQbTVZL2lrQ2FyTk9rbwo3NlJ1cE1kTU5YYWthSk8wOS8ycHNGN1BWQS93SS8xM0F1K1dFWnJNU3EwRTJwQThwV2N0QW9HQkFOOXI0a05kCkpobG0rdFl5bFVIdnMxbnJBbk1vNllNdGs1cy9vUlgrVEU2bGdIRDFjVFVzRGNEdzQySUtFQ1NjaE0xeHN4OW8KRnpycW8wc3VXcWpKanMzb1pxZmdZeHF4alFzQ2UrQTJrZDI4QzRDcFdpVlhFVHh5VWNrRXhDSjBqY216WExobwo4c2o2NGdZWnlxWXlkaHVoWUpTYU5hbk5Rd3R5cjVGNUZobHJBb0dCQUpCYUZON1g4OVF5YWs4RUV5R3RlK3dXCnBDYUVYbFlXNVQxNUtYa2o0eWQwdXcvZVg4TjkyQjVYVHBEREVLQkRib0hPT0V4NFNhQ29FTVk4SVI5OHN1NFgKcjRhdDlQNE13YWtLUCtrZVM5NFo2S1dNMWlYZ0RDSThDcGFscExNOU5mMmtlRnZSVytMZkdwdk0vT2RRRmw5SgordWYxZ0pDb2dYSjRvNG9YM0hDUkFvR0FTSFlFTVlYK2hNZHo4bkZGS2lRNkt3QWNlR0JMdTlkdUpJTlcxck5YCkJNQU4reDhyb29yVUJ6bGVnS2xSVi90cFYyTWxWa3RGemVzNzRRZ2RaeXlkQklLNWdvMzJvTitqWFlSRDJnUGMKUituMTVJbnp1UlZSc3IxSzlSWk5jdlZlYXU0UU84OENvZ3d0b1IwZklTVWZZdWc2LzhOUHJMRkdMVG56d0hwTQpXMFVDZ1lFQXdRNWZGSEVwZldlekdSRjBFbDl6bXBxZHcvUFlNaVZucW9LVGxBcGZWOTJJcXdIK1Q0NnVpQ2hjCmdyeEV5akJ5SjArS3FBdEpQdUlzVGVIRyt4bktKVzVvNmRDOXM2UFJNcmFqaVZTMjZyMVNHODdBK05pak1FVnIKdytSV25kaytiWkZHZkpqTVFHREx2UDJGQWdWeHJXS2xIT3k0ZlE0RzBmZzRCY2hLQTU0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLSIKc3NoUHVibGljS2V5PSJzc2gtcnNhIEFBQUFCM056YUMxeWMyRUFBQUFCSlFBQUFRRUF5cXFIcXhYL0RRQjdiQVU5RGUvRXEwOTZ5OGt2R2hzNDFrT25GQUYrTXgwcWhIdXZFeDhQVnByM3pMTnZwS25VbUhmTUNnZFp5QnRnYldacmIvWjV3OHdLT01Gajc5VXZGejdvbmxvek1zaFJYTURjbk5JdTRnU01yaTV2elMvRmpWTHQva3U5NXV1VmtNTCt2dkFXbmIrRmRYT0VxQmVUUTdMOVprNFlzVENSMzkrN0JOeFo0clNBOWkydEN4OVhEN2Z6TEtCVnVBTW5lbFh6SDRIaTJWSXNKenp5YWtLbjk2ZmFVcklLSnV4Z09DRTlvMWVIb3N5bzF3cTVpN0hRdzE3TE1sU2tqYW1vSXlXeVlST1hCcmV1SWRXaDVFZGZRdUg1Rndqd2E5ZVk3YnViK1RZV1l0OERnTlA3ZCsvVzcvT09YZXgxWTlvTHNBZXRveE9Fenc9PSByc2Eta2V5LTIwMTgwODIyIgp0b3RhbE5zZE5vZGVQb29scz0iMiIKbnNkTm9kZXNQZXJQb29sPSIyIgpuc2ROb2RlQ291bnQ9IjQiCm5zZE5vZGVIb3N0bmFtZVByZWZpeD0ic3Mtc2VydmVyLSIKY2xpZW50Tm9kZUNvdW50PSI0IgpjbGllbnROb2RlSG9zdG5hbWVQcmVmaXg9InNzLWNvbXB1dGUtIgpibG9ja1NpemU9IjJNIgpkYXRhUmVwbGljYT0iMSIKbWV0YWRhdGFSZXBsaWNhPSIxIgpncGZzTW91bnRQb2ludD0iL2dwZnMvZnMxIgpoaWdoQXZhaWxhYmlsaXR5PSJmYWxzZSIKc2hhcmVkRGF0YURpc2tDb3VudD0iNDQiCmJsb2NrVm9sdW1lc1BlclBvb2w9IjIyIgppbnN0YWxsZXJOb2RlPSJzcy1zZXJ2ZXItMSIKcHJpdmF0ZVN1Ym5ldHNGUUROPSJncGZzLm9yYWNsZXZjbi5jb20gcHJpdmF0ZTAuZ3Bmcy5vcmFjbGV2Y24uY29tIgpwcml2YXRlQlN1Ym5ldHNGUUROPSJncGZzLm9yYWNsZXZjbi5jb20gcHJpdmF0ZWIwLmdwZnMub3JhY2xldmNuLmNvbSIKY29tcGFueU5hbWU9IkNvbXBhbnkgTmFtZSIKY29tcGFueUlEPSIxMjM0NTY3Igpjb3VudHJ5Q29kZT0iVVMiCmVtYWlsYWRkcmVzcz0ibmFtZUBlbWFpbC5jb20iCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMiCiMjIyMjIyMjIyMjIyMjIyMjIFR1cm4gT2ZmIHRoZSBGaXJld2FsbCAjIyMjIyMjIyMjIyMjIyMiCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMiCmVjaG8gIlR1cm5pbmcgb2ZmIHRoZSBGaXJld2FsbC4uLiIKd2hpY2ggYXB0LWdldCAmPiAvZGV2L251bGwKaWYgWyAkPyAtZXEgMCBdIDsgdGhlbgogICAgZWNobyAiIiA+IC9ldGMvaXB0YWJsZXMvcnVsZXMudjQKICAgIGVjaG8gIiIgPiAvZXRjL2lwdGFibGVzL3J1bGVzLnY2CgogICAgaXB0YWJsZXMgLUYKICAgIGlwdGFibGVzIC1YCiAgICBpcHRhYmxlcyAtdCBuYXQgLUYKICAgIGlwdGFibGVzIC10IG5hdCAtWAogICAgaXB0YWJsZXMgLXQgbWFuZ2xlIC1GCiAgICBpcHRhYmxlcyAtdCBtYW5nbGUgLVgKICAgIGlwdGFibGVzIC1QIElOUFVUIEFDQ0VQVAogICAgaXB0YWJsZXMgLVAgT1VUUFVUIEFDQ0VQVAogICAgaXB0YWJsZXMgLVAgRk9SV0FSRCBBQ0NFUFQKZWxzZQogICAgc2VydmljZSBmaXJld2FsbGQgc3RvcAogICAgY2hrY29uZmlnIGZpcmV3YWxsZCBvZmYKZmkKCiMjIGNsb3VkLWluaXQgYm9vdHN0cmFwIHNjcmlwdAoKCmVjaG8gIgp2ZXJzaW9uPVwiJHZlcnNpb25cIgpkb3dubG9hZFVybD1cIiRkb3dubG9hZFVybFwiCnNzaFByaXZhdGVLZXk9XCIkc3NoUHJpdmF0ZUtleVwiCnNzaFB1YmxpY0tleT1cIiRzc2hQdWJsaWNLZXlcIgp0b3RhbE5zZE5vZGVQb29scz1cIiR0b3RhbE5zZE5vZGVQb29sc1wiCm5zZE5vZGVzUGVyUG9vbD1cIiRuc2ROb2Rlc1BlclBvb2xcIgpuc2ROb2RlQ291bnQ9XCIkbnNkTm9kZUNvdW50XCIKbnNkTm9kZUhvc3RuYW1lUHJlZml4PVwiJG5zZE5vZGVIb3N0bmFtZVByZWZpeFwiCmNsaWVudE5vZGVDb3VudD1cIiRjbGllbnROb2RlQ291bnRcIgpjbGllbnROb2RlSG9zdG5hbWVQcmVmaXg9XCIkY2xpZW50Tm9kZUhvc3RuYW1lUHJlZml4XCIKYmxvY2tTaXplPVwiJGJsb2NrU2l6ZVwiCmRhdGFSZXBsaWNhPVwiJGRhdGFSZXBsaWNhXCIKbWV0YWRhdGFSZXBsaWNhPVwiJG1ldGFkYXRhUmVwbGljYVwiCmdwZnNNb3VudFBvaW50PVwiJGdwZnNNb3VudFBvaW50XCIKaGlnaEF2YWlsYWJpbGl0eT1cIiRoaWdoQXZhaWxhYmlsaXR5XCIKc2hhcmVkRGF0YURpc2tDb3VudD1cIiRzaGFyZWREYXRhRGlza0NvdW50XCIKYmxvY2tWb2x1bWVzUGVyUG9vbD1cIiRibG9ja1ZvbHVtZXNQZXJQb29sXCIKaW5zdGFsbGVyTm9kZT1cIiRpbnN0YWxsZXJOb2RlXCIKcHJpdmF0ZVN1Ym5ldHNGUUROPVwiJHByaXZhdGVTdWJuZXRzRlFETlwiCnByaXZhdGVCU3VibmV0c0ZRRE49XCIkcHJpdmF0ZUJTdWJuZXRzRlFETlwiCmNvbXBhbnlOYW1lPVwiJGNvbXBhbnlOYW1lXCIKY29tcGFueUlEPVwiJGNvbXBhbnlJRFwiCmNvdW50cnlDb2RlPVwiJGNvdW50cnlDb2RlXCIKZW1haWxhZGRyZXNzPVwiJGVtYWlsYWRkcmVzc1wiCiIgPiAvdG1wL2dwZnNfZW52X3ZhcmlhYmxlcy5zaAoKZWNobyAiaW5zdGFsbGVyTm9kZSA9ICRpbnN0YWxsZXJOb2RlIgplY2hvICIkc3NoUHJpdmF0ZUtleSIgPiAvcm9vdC8uc3NoL2lkX3JzYQplY2hvICIkc3NoUHVibGljS2V5IiA+IC9yb290Ly5zc2gvaWRfcnNhLnB1YgpjaG1vZCA2MDAgfi8uc3NoL2lkX3JzYQpjaG1vZCA2MDAgfi8uc3NoL2lkX3JzYS5wdWIKY2htb2QgNjQwIH4vLnNzaC9hdXRob3JpemVkX2tleXMKCiMgd2UgbWlnaHQgbmVlZCB0aGlzIGZvciBCTSBzaGFwZXMKc2xlZXAgNjBzCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyIKIyMjIyMjIyMjIyMjIyMjIyMgICBVcGRhdGUgcmVzb2x2LmNvbmYgICMjIyMjIyMjIyMjIyMjIyIKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyIKIyMgTW9kaWZ5IHJlc29sdi5jb25mIHRvIGVuc3VyZSBETlMgbG9va3VwcyB3b3JrIGZyb20gb25lIHByaXZhdGUgc3VibmV0IHRvIGFub3RoZXIgc3VibmV0Cm12IC9ldGMvcmVzb2x2LmNvbmYgL2V0Yy9yZXNvbHYuY29uZi5iYWNrdXAKZWNobyBgaG9zdG5hbWVgIHwgZ3JlcCAtcSAkY2xpZW50Tm9kZUhvc3RuYW1lUHJlZml4CmlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICBlY2hvICJzZWFyY2ggJHtwcml2YXRlQlN1Ym5ldHNGUUROfSIgPiAvZXRjL3Jlc29sdi5jb25mCiAgZWNobyAibmFtZXNlcnZlciAxNjkuMjU0LjE2OS4yNTQiID4+IC9ldGMvcmVzb2x2LmNvbmYKZWxzZSAKICBlY2hvICJzZWFyY2ggJHtwcml2YXRlQlN1Ym5ldHNGUUROfSAke3ByaXZhdGVTdWJuZXRzRlFETn0gIiA+IC9ldGMvcmVzb2x2LmNvbmYKICBlY2hvICJuYW1lc2VydmVyIDE2OS4yNTQuMTY5LjI1NCIgPj4gL2V0Yy9yZXNvbHYuY29uZgpmaQoKIyBUaGUgYmVsb3cgaXMgdG8gZW5zdXJlIGFueSBjdXN0b20gY2hhbmdlIHRvIC9ldGMvaG9zdHMgYW5kIC9ldGMvcmVzb2x2LmNvbmYgd2lsbCBub3QgYmUgb3ZlcndyaXR0ZW4gd2l0aCBkYXRhIGZyb20gbWV0YXNlcnZpY2UsIGJ1dCBkaGNsaWVudCB3aWxsIHN0aWxsIG92ZXJ3cml0ZSAvZXRjL3Jlc29sdi5jb25mLiAgSGVuY2UgZG8gdGhlIGFkZGl0aW9uYWwgc3RlcCB1c2luZyBjaGF0dHIgY29tbWFuZC4KaWYgWyAteiAvZXRjL29jaS1ob3N0bmFtZS5jb25mIF07IHRoZW4KICBlY2hvICJQUkVTRVJWRV9IT1NUSU5GTz0yIiA+IC9ldGMvb2NpLWhvc3RuYW1lLmNvbmYKZWxzZQogICMgaHR0cHM6Ly9kb2NzLmNsb3VkLm9yYWNsZS5jb20vaWFhcy9Db250ZW50L05ldHdvcmsvVGFza3MvbWFuYWdpbmdESENQLmh0bSNub3RlcwogIHNlZCAtaSAicy9eUFJFU0VSVkVfSE9TVElORk8vI1BSRVNFUlZFX0hPU1RJTkZPL2ciIC9ldGMvb2NpLWhvc3RuYW1lLmNvbmYKICBlY2hvICJQUkVTRVJWRV9IT1NUSU5GTz0yIiA+PiAvZXRjL29jaS1ob3N0bmFtZS5jb25mCmZpCmNhdCAvZXRjL29jaS1ob3N0bmFtZS5jb25mCiMgVGhlIGJlbG93IGlzIHRvIGVuc3VyZSBhYm92ZSBjaGFuZ2VzIHdpbGwgbm90IGJlIG92ZXJ3cml0dGVuIGJ5IGRoY2xpZW50CmNoYXR0ciAraSAvZXRjL3Jlc29sdi5jb25mCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyIKIyMjIyMjIyMjIyMjIyMjIyMgICBjb25maWd1cmUgMm5kIE5JQyAgICMjIyMjIyMjIyMjIyMjIyIKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyIKZWNobyBgaG9zdG5hbWVgIHwgZ3JlcCAtcSAkY2xpZW50Tm9kZUhvc3RuYW1lUHJlZml4CmlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICBlY2hvICJjbGllbnQgbm9kZXMgLSBnZXQgaG9zdG5hbWUuLi4iCiAgdGhpc0ZRRE49YGhvc3RuYW1lIC0tZnFkbmAKICB0aGlzSG9zdD0ke3RoaXNGUUROJSUuKn0KZWxzZQppZmNvbmZpZyB8IGdyZXAgIl5lbm8zZDE6XHxeZW5wNzBzMGYxZDE6XHxeZW5vMmQxOiIKICBpZiBbICQ/IC1lcSAwIF0gOyB0aGVuCiAgICBlY2hvICIyIE5JQyBzZXR1cCIKICAgIGlmY29uZmlnIHwgZ3JlcCAiXmVucDcwczBmMWQxOiIKICAgIGlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICAgICAgaW50ZXJmYWNlPSJlbnA3MHMwZjFkMSIKICAgIGZpCgogICAgaWZjb25maWcgfCBncmVwICJeZW5vM2QxOiIKICAgIGlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICAgICAgaW50ZXJmYWNlPSJlbm8zZDEiCiAgICBmaQogICAgIyBBTUQgQk0uU3RhbmRhcmQuRTIuNjQgc2hhcGUKICAgIGlmY29uZmlnIHwgZ3JlcCAiXmVubzJkMToiCiAgICBpZiBbICQ/IC1lcSAwIF0gOyB0aGVuCiAgICAgIGludGVyZmFjZT0iZW5vMmQxIgogICAgZmkKCgogICAgICBpcCByb3V0ZQogICAgICBpZmNvbmZpZwogICAgICByb3V0ZQogICAgICBpcCBhZGRyCgogICAgICBjZCAvZXRjL3N5c2NvbmZpZy9uZXR3b3JrLXNjcmlwdHMvCgogICAgICAjIFdhaXQgdGlsbCAybmQgTklDIGlzIGNvbmZpZ3VyZWQsIHNpbmNlIHRoZSBHUEZTIGNsdXN0ZXIgd2lsbCB1c2UgdGhlIDJuZCBOSUMgZm9yIGNsdXN0ZXIgY29tbS4KICAgICAgcHJpdmF0ZUlwPWBjdXJsIC1zIGh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvb3BjL3YxL3ZuaWNzLyB8IGpxICcuWzFdLnByaXZhdGVJcCcgfCBzZWQgJ3MvIi8vZycgYCA7IGVjaG8gJHByaXZhdGVJcAogICAgICB3aGlsZSBbIC16ICIkcHJpdmF0ZUlwIiAtbyAkcHJpdmF0ZUlwID0gIm51bGwiIF07CiAgICAgIGRvCiAgICAgICAgc2xlZXAgMTBzCiAgICAgICAgZWNobyAiV2FpdGluZyBmb3IgMm5kIFBoeXNpY2FsIE5JQyB0byBnZXQgY29uZmlndXJlZCB3aXRoIGhvc3RuYW1lIgogICAgICAgIHByaXZhdGVJcD1gY3VybCAtcyBodHRwOi8vMTY5LjI1NC4xNjkuMjU0L29wYy92MS92bmljcy8gfCBqcSAnLlsxXS5wcml2YXRlSXAnIHwgc2VkICdzLyIvL2cnIGAgOyBlY2hvICRwcml2YXRlSXAKICAgICAgZG9uZQogICAgICBlY2hvICJTZXJ2ZXIgbm9kZXMgd2l0aCAyIE5JQ3MgLSBnZXQgaG9zdG5hbWUgZm9yIDJuZCBOSUMuLi4iCgogICAgICBwcml2YXRlSXA9YGN1cmwgLXMgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9vcGMvdjEvdm5pY3MvIHwganEgJy5bMV0ucHJpdmF0ZUlwJyB8IHNlZCAncy8iLy9nJyBgIDsgZWNobyAkcHJpdmF0ZUlwCiAgICAgIG1hY0FkZHI9YGN1cmwgLXMgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9vcGMvdjEvdm5pY3MvIHwganEgJy5bMV0ubWFjQWRkcicgfCBzZWQgJ3MvIi8vZycgYCA7IGVjaG8gJG1hY0FkZHIKICAgICAgc3VibmV0Q2lkckJsb2NrPWBjdXJsIC1zIGh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvb3BjL3YxL3ZuaWNzLyB8IGpxICcuWzFdLnN1Ym5ldENpZHJCbG9jaycgfCBzZWQgJ3MvIi8vZycgYCA7IGVjaG8gJHN1Ym5ldENpZHJCbG9jawogICAgICB2bmljSWQ9YGN1cmwgLXMgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9vcGMvdjEvdm5pY3MvIHwganEgJy5bMV0udm5pY0lkJyB8IHNlZCAncy8iLy9nJyBgIDsgZWNobyAkdm5pY0lkCgogICAgICBlY2hvICIkc3VibmV0Q2lkckJsb2NrIHZpYSAkcHJpdmF0ZUlwIGRldiAkaW50ZXJmYWNlIiA+ICAvZXRjL3N5c2NvbmZpZy9uZXR3b3JrLXNjcmlwdHMvcm91dGUtJGludGVyZmFjZQoKICAgICAgZWNobyAiREVWSUNFPSRpbnRlcmZhY2UKSFdBRERSPSRtYWNBZGRyCk9OQk9PVD15ZXMKVFlQRT1FdGhlcm5ldApVU0VSQ1RMPW5vCklQQUREUj0kcHJpdmF0ZUlwCk5FVE1BU0s9MjU1LjI1NS4yNTUuMApNVFU9OTAwMApOTV9DT05UUk9MTEVEPW5vCiIgPiAvZXRjL3N5c2NvbmZpZy9uZXR3b3JrLXNjcmlwdHMvaWZjZmctJGludGVyZmFjZQoKIyBDaGVjayBpZiBwcm9jZXNzb3IgaXMgSW50ZWwgb3IgQU1ECmxzY3B1IHwgZ3JlcCAiVmVuZG9yIElEOiIgIHwgZ3JlcCAiQXV0aGVudGljQU1EIgppZiBbICQ/IC1lcSAwIF07ICB0aGVuCiAgZWNobyBBTUQKICAjIERvIG5vdGhpbmcuIFVzZSBkZWZhdWx0CmVsc2UKICBlY2hvIEludGVsCiAgIyBUaGUgYmVsb3cgYXJlIG9ubHkgYXBwbGljYWJsZSB0byBJbnRlbCBzaGFwZXMsIG5vdCBmb3IgQU1EIHNoYXBlcywgaXQgZGVncmFkZXMgbi93IHBlcmZvcm1hbmNlIG9uIEFNRAogIGVjaG8gIkVUSFRPT0xfT1BUUz1cIi1HICR7aW50ZXJmYWNlfSByeCAyMDQ3IHR4IDIwNDcgcngtanVtYm8gODE5MTsgLUwgJHtpbnRlcmZhY2V9IGNvbWJpbmVkIDc0XCIiID4+IC9ldGMvc3lzY29uZmlnL25ldHdvcmstc2NyaXB0cy9pZmNmZy0kaW50ZXJmYWNlCmZpCgoKCgogICAgICBzeXN0ZW1jdGwgc3RhdHVzIG5ldHdvcmsuc2VydmljZQogICAgICAjIFlvdSBtaWdodCBzZWUgc29tZSBESENQIGVycm9yLCBpZ25vcmUgaXQuICBJdHMgbm90IGltcGFjdGluZyBhbnkgZnVuY3Rpb25hbGl0eSBJIGtub3cgb2YuCiAgICAgIHN5c3RlbWN0bCByZXN0YXJ0IG5ldHdvcmsuc2VydmljZQoKICAgICAgaXAgcm91dGUgOyBpZmNvbmZpZyA7IHJvdXRlIDsgaXAgYWRkciA7CiMgQWRkIGxvZ2ljIHRvIGVuc3VyZSB0aGUgYmVsb3cgaXMgbm90IGVtcHR5CiAgICAgIHNlY29uZE5pY0ZRRE5Ib3N0bmFtZT1gbnNsb29rdXAgJHByaXZhdGVJcCB8IGdyZXAgIm5hbWUgPSAiIHwgZ2F3ayAtRiI9IiAneyBwcmludCAkMiB9JyB8IHNlZCAgInN8XiB8fGciIHwgc2VkICAic3xcLiR8fGciYAogICAgICB0aGlzRlFETj0kc2Vjb25kTmljRlFETkhvc3RuYW1lCiAgICAgIHRoaXNIb3N0PSR7dGhpc0ZRRE4lJS4qfQogICAgICBzZWNvbmROSUNEb21haW5OYW1lPSR7dGhpc0ZRRE4jKi4qfQogICAgICBlY2hvICRzZWNvbmROSUNEb21haW5OYW1lCiAgICAgIHByaW1hcnlOSUNIb3N0bmFtZT0iYGhvc3RuYW1lYCIKCiAgICBlbHNlCiAgICAgICMgU2VydmVycyB3aXRoIG9ubHkgMSBwaHlzaWNhbCBOSUMKICAgICAgZWNobyAiU2VydmVyIG5vZGVzIHdpdGggMSBwaHlzaWNhbCBOSUMgLSBnZXQgaG9zdG5hbWUgZm9yIDFzdCBOSUMuLi4iCiAgICAgIHRoaXNGUUROPSJgaG9zdG5hbWUgLS1mcWRuYCIKICAgICAgdGhpc0hvc3Q9IiR7dGhpc0ZRRE4lJS4qfSIKICAgIGZpCmZpCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyIKIyMjIyMjIyMgIGNvbmZpZ3VyZSAxc3QgTklDIGZvciBwZXJmb3JtYW5jZSAgICMjIyMjIyMjIyIKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyIKIyBGaXJzdCBOSUMgbmFtZXMKIyBlbm8yICAmIGVuczMKaWZjb25maWcgfCBncmVwICJeZW5vMjoiCmlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICBwcmltYXJ5TklDSW50ZXJmYWNlPSJlbm8yIgpmaQoKaWZjb25maWcgfCBncmVwICJeZW5zMzoiCmlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICBwcmltYXJ5TklDSW50ZXJmYWNlPSJlbnMzIgpmaQoKaWZjb25maWcgfCBncmVwICJeZW5wNzBzMGYwOiIKaWYgWyAkPyAtZXEgMCBdIDsgdGhlbgogIHByaW1hcnlOSUNJbnRlcmZhY2U9ImVucDcwczBmMCIKZmkKCmlmY29uZmlnIHwgZ3JlcCAiXmVubzE6IgppZiBbICQ/IC1lcSAwIF0gOyB0aGVuCiAgcHJpbWFyeU5JQ0ludGVyZmFjZT0iZW5vMSIKZmkKCiMgQ2hlY2sgaWYgcHJvY2Vzc29yIGlzIEludGVsIG9yIEFNRApsc2NwdSB8IGdyZXAgIlZlbmRvciBJRDoiICB8IGdyZXAgIkF1dGhlbnRpY0FNRCIKaWYgWyAkPyAtZXEgMCBdOyAgdGhlbgogIGVjaG8gQU1ECiAgIyBEbyBub3RoaW5nLiBVc2UgZGVmYXVsdAplbHNlCiAgZWNobyBJbnRlbAogICMgVGhlIGJlbG93IGFyZSBvbmx5IGFwcGxpY2FibGUgdG8gSW50ZWwgc2hhcGVzLCBub3QgZm9yIEFNRCBzaGFwZXMsIGl0IGRlZ3JhZGVzIG4vdyBwZXJmb3JtYW5jZSBvbiBBTUQKICBlY2hvICJldGh0b29sIC1HICRwcmltYXJ5TklDSW50ZXJmYWNlIHJ4IDIwNDcgdHggMjA0NyByeC1qdW1ibyA4MTkxIiA+PiAvZXRjL3JjLmxvY2FsCiAgIyB0aGUgYmVsb3cgY2hhbmdlIGFwcGxpZXMgdG8gQk0gc2hhcGVzIGFuZCBmYWlscyBvbiBWTSBzaGFwZXMsIGJ1dCBoYXJtbGVzcyB0byBzdGlsbCBydW4gaXQKICBlY2hvICJldGh0b29sIC1MICRwcmltYXJ5TklDSW50ZXJmYWNlIGNvbWJpbmVkIDc0IiA+PiAvZXRjL3JjLmxvY2FsCiAgY2htb2QgK3ggL2V0Yy9yYy5sb2NhbAoKZmkKCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIgoKCiMgQWRkIGhvc3QgaW5mbyB0byBncGZzX2Vudl92YXJpYWJsZXMuc2ggZm9yIG90aGVyIHNjcmlwdHMgdG8gcmUtdXNlCmVjaG8gInRoaXNGUUROPVwiJHRoaXNGUUROXCIiID4+IC90bXAvZ3Bmc19lbnZfdmFyaWFibGVzLnNoCmVjaG8gInRoaXNIb3N0PVwiJHRoaXNIb3N0XCIiID4+IC90bXAvZ3Bmc19lbnZfdmFyaWFibGVzLnNoCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIgoKbXYgL2V0Yy95dW0ucmVwb3MuZC9lcGVsLnJlcG8gIC9ldGMveXVtLnJlcG9zLmQvZXBlbC5yZXBvLmRpc2FibGVkCm12IC9ldGMveXVtLnJlcG9zLmQvZXBlbC10ZXN0aW5nLnJlcG8gIC9ldGMveXVtLnJlcG9zLmQvZXBlbC10ZXN0aW5nLnJlcG8uZGlzYWJsZWQKc2VkIC1pICJzL1NFTElOVVg9ZW5mb3JjaW5nL1NFTElOVVg9ZGlzYWJsZWQvZyIgL2V0Yy9zZWxpbnV4L2NvbmZpZwpzZXRlbmZvcmNlIDAgCgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMgT1MgUGVyZm9ybWFuY2UgdHVuaW5nCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKCiMgVGhlIGJlbG93IGFwcGxpZXMgZm9yIGJvdGggY2xpZW50IGFuZCBzZXJ2ZXIgbm9kZXMgKHN0b3JhZ2UpCmNkIC91c3IvbGliL3R1bmVkLwpjcCAtciB0aHJvdWdocHV0LXBlcmZvcm1hbmNlLyBncGZzLW9jaS1wZXJmb3JtYW5jZQoKZWNobyAiCiMKIyB0dW5lZCBjb25maWd1cmF0aW9uCiMKClttYWluXQpzdW1tYXJ5PUJyb2FkbHkgYXBwbGljYWJsZSB0dW5pbmcgdGhhdCBwcm92aWRlcyBleGNlbGxlbnQgcGVyZm9ybWFuY2UgYWNyb3NzIGEgdmFyaWV0eSBvZiBjb21tb24gc2VydmVyIHdvcmtsb2FkcwoKW2NwdV0KZm9yY2VfbGF0ZW5jeT0xCmdvdmVybm9yPXBlcmZvcm1hbmNlCmVuZXJneV9wZXJmX2JpYXM9cGVyZm9ybWFuY2UKbWluX3BlcmZfcGN0PTEwMAoKW3ZtXQp0cmFuc3BhcmVudF9odWdlX3BhZ2VzPW5ldmVyCgpbc3lzY3RsXQpuZXQuaXB2NC50Y3BfdGltZXN0YW1wcz0xCm5ldC5pcHY0LnRjcF9zYWNrPTEKbmV0LmlwdjQudGNwX2RzYWNrPTEKbmV0LmlwdjQudGNwX2xvd19sYXRlbmN5PTEKbmV0LmlwdjQudGNwX2Fkdl93aW5fc2NhbGU9MgpuZXQuaXB2NC50Y3Bfd2luZG93X3NjYWxpbmc9MQpuZXQuaXB2NC50Y3Bfc2xvd19zdGFydF9hZnRlcl9pZGxlPTAKbmV0LmlwdjQudGNwX3N5bl9yZXRyaWVzPTgKbmV0LmlwdjQudGNwX3JtZW09NDA5NiA4NzM4MCAxNjc3NzIxNgpuZXQuaXB2NC50Y3Bfd21lbT00MDk2IDY1NTM2IDE2Nzc3MjE2Cm5ldC5jb3JlLnJtZW1fbWF4PTE2Nzc3MjE2Cm5ldC5jb3JlLndtZW1fbWF4PTE2Nzc3MjE2Cm5ldC5jb3JlLnJtZW1fZGVmYXVsdD0xNjc3NzIxNgpuZXQuY29yZS53bWVtX2RlZmF1bHQ9MTY3NzcyMTYKbmV0LmNvcmUub3B0bWVtX21heD0xNjc3NzIxNgpuZXQuY29yZS5zb21heGNvbm4gPSA4MTkyCm5ldC5jb3JlLm5ldGRldl9tYXhfYmFja2xvZz0yNTAwMDAKc3VucnBjLnVkcF9zbG90X3RhYmxlX2VudHJpZXM9MTI4CnN1bnJwYy50Y3Bfc2xvdF90YWJsZV9lbnRyaWVzPTEyOAprZXJuZWwuc3lzcnEgPSAxCmtlcm5lbC5zY2hlZF9taW5fZ3JhbnVsYXJpdHlfbnMgPSAxMDAwMDAwMAprZXJuZWwuc2NoZWRfd2FrZXVwX2dyYW51bGFyaXR5X25zID0gMTUwMDAwMDAKdm0ubWluX2ZyZWVfa2J5dGVzID0gMTY3NzcyMTYKdm0uZGlydHlfcmF0aW8gPSAzMAp2bS5kaXJ0eV9iYWNrZ3JvdW5kX3JhdGlvID0gMTAKdm0uc3dhcHBpbmVzcz0zMAoiID4gZ3Bmcy1vY2ktcGVyZm9ybWFuY2UvdHVuZWQuY29uZgoKY2QgLQoKCiMgYmVmb3JlIGFwcGx5aW5nIHRvIGNsaWVudCBub2RlcywgbWFrZSBzdXJlIHRoZXkgaGF2ZSBlbm91Z2ggbWVtb3J5LgplY2hvICIkdGhpc0hvc3QiIHwgZ3JlcCAtcSAgJGNsaWVudE5vZGVIb3N0bmFtZVByZWZpeAppZiBbICQ/IC1lcSAwIF0gOyB0aGVuCiAgY29yZUlkQ291bnQ9YGdyZXAgIl5jb3JlIGlkIiAvcHJvYy9jcHVpbmZvIHwgc29ydCAtdSB8IHdjIC1sYCA7IGVjaG8gJGNvcmVJZENvdW50CiAgc29ja2V0Q291bnQ9YGVjaG8gJCgoJChncmVwICJecGh5c2ljYWwgaWQiIC9wcm9jL2NwdWluZm8gfCBhd2sgJ3twcmludCAkNH0nIHwgc29ydCAtdW4gfCB0YWlsIC0xKSsxKSlgIDsgZWNobyAkc29ja2V0Q291bnQKICBpZiBbICQoKHNvY2tldENvdW50KmNvcmVJZENvdW50KSkgLWd0IDQgIF07IHRoZW4KICAgIHR1bmVkLWFkbSBwcm9maWxlIGdwZnMtb2NpLXBlcmZvcm1hbmNlCiAgZWxzZQogICAgIyBDbGllbnQgaXMgdXNpbmcgc2hhcGUgd2l0aCBsZXNzIHRoYW4gNCBwaHlzaWNhbCBjb3JlcyBhbmQgbGVzcyAzMEdCIG1lbW9yeSwgYWJvdmUgdHVuZWQgcHJvZmlsZSByZXF1aXJlcyBhdGxlYXN0IDE2R0Igb2Ygdm0ubWluX2ZyZWVfa2J5dGVzLCBoZW5jZSBkb24ndCBhcHBseSB0dW5pbmcgYmUgZGVmYXVsdC4gIExldCB1c2VyIGV2YWx1YXRlIHdoYXQgYXJlIHZhbGlkIHZhbHVlcyBmb3Igc3VjaCBzbWFsbCBjb21wdXRlIHNoYXBlcy4KICAgIGVjaG8gInNraXAgcHJvZmlsZSB0dW5pbmcuLi4iCiAgZmkgOwpmaTsKCgplY2hvICIkdGhpc0hvc3QiIHwgZ3JlcCAtcSAgJG5zZE5vZGVIb3N0bmFtZVByZWZpeAppZiBbICQ/IC1lcSAwIF0gOyB0aGVuCiAgdHVuZWQtYWRtIHByb2ZpbGUgZ3Bmcy1vY2ktcGVyZm9ybWFuY2UKZmkKCiMgRGlzcGxheSBhY3RpdmUgcHJvZmlsZQp0dW5lZC1hZG0gYWN0aXZlCgojIG9ubHkgZm9yIGNsaWVudCBub2RlcwplY2hvICIkdGhpc0hvc3QiIHwgZ3JlcCAtcSAgJGNsaWVudE5vZGVIb3N0bmFtZVByZWZpeAppZiBbICQ/IC1lcSAwIF0gOyB0aGVuCiAgZWNobyBvZmYgPiAvc3lzL2RldmljZXMvc3lzdGVtL2NwdS9zbXQvY29udHJvbApmaQoKZWNobyAiJHRoaXNIb3N0IiB8IGdyZXAgLXEgICRjbGllbnROb2RlSG9zdG5hbWVQcmVmaXgKaWYgWyAkPyAtZXEgMCBdIDsgdGhlbgoKICAjIFRoaXMgbWlnaHQgYmUgYXBwbGljYWJsZSBvbmx5IGZvciBjb21wdXRlLW4gbm9kZXMuICBJdHMgdW5jbGVhciBmcm9tIHJlY29tbWVuZGF0aW9ucyBkb2MuICAKICAjIHJlcXVpcmUgcmVzdGFydCBmb3IgdGhlIGNoYW5nZSB0byBiZSBlZmZlY3RpdmUKICBlY2hvICIqIHNvZnQgbm9maWxlIDUwMDAwMCIgPj4gL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZgogIGVjaG8gIiogc29mdCBucHJvYyAxMzEwNzIiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqIGhhcmQgbm9maWxlIDUwMDAwMCIgPj4gL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZgogIGVjaG8gIiogaGFyZCBucHJvYyAxMzEwNzIiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKCgogICMgVG8gc2V0IHZhbHVlcyBmb3IgY3VycmVudCBzZXNzaW9uCiAgdWxpbWl0IC1uIDUwMDAwMAogIHVsaW1pdCAtdSAxMzEwNzIKCiAgIyBjaGVjayBpZiB0aGUgdWxpbWl0cyB3ZXJlIHVwZGF0ZWQgZm9yIHRoZSBjdXJyZW50IHNlc3Npb24KICB1bGltaXQgLW4gCiAgdWxpbWl0IC11ICAKCiAgZWNobyAidWxpbWl0IC1uIDUwMDAwMCA+PiAgfi8uYmFzaF9wcm9maWxlCiAgZWNobyAidWxpbWl0IC11IDEzMTA3MiA+PiAgfi8uYmFzaF9wcm9maWxlCgoKZWxzZQogICMgQXNzdW1lIGl0cyBzZXJ2ZXIgbm9kZQoKICBlY2hvICIqICAgc29mdCAgICBtZW1sb2NrICAgICAgLTEgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCiAgZWNobyAiKiAgIGhhcmQgICAgbWVtbG9jayAgICAgIC0xICIgPj4gL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZgogIGVjaG8gIiogICBzb2Z0ICAgIHJzcyAgICAgICAgICAtMSAiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqICAgaGFyZCAgICByc3MgICAgICAgICAgLTEgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCiAgZWNobyAiKiAgIHNvZnQgICAgY29yZSAgICAgICAgICAtMSAiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqICAgaGFyZCAgICBjb3JlICAgICAgICAgIC0xICIgPj4gL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZgogIGVjaG8gIiogICBzb2Z0ICAgIG1heGxvZ2lucyAgICAgODE5MiAiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqICAgaGFyZCAgICBtYXhsb2dpbnMgICAgIDgxOTIgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCiAgZWNobyAiKiAgIHNvZnQgICAgc3RhY2sgICAgICAgICAtMSAiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqICAgaGFyZCAgICBzdGFjayAgICAgICAgIC0xICIgPj4gL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZgogIGVjaG8gIiogICBzb2Z0ICAgIG5wcm9jICAgICAgICAgMjA2NzU1NCAiID4+IC9ldGMvc2VjdXJpdHkvbGltaXRzLmNvbmYKICBlY2hvICIqICAgaGFyZCAgICBucHJvYyAgICAgICAgIDIwNjc1NTQgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCiAgZWNobyAiKiBzb2Z0IG5vZmlsZSA1MDAwMDAgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCiAgZWNobyAiKiBoYXJkIG5vZmlsZSA1MDAwMDAgIiA+PiAvZXRjL3NlY3VyaXR5L2xpbWl0cy5jb25mCgoKICBlY2hvICJ1bGltaXQgLWwgdW5saW1pdGVkIiA+PiAgfi8uYmFzaF9wcm9maWxlCiAgZWNobyAidWxpbWl0IC1tIHVubGltaXRlZCIgPj4gIH4vLmJhc2hfcHJvZmlsZQogIGVjaG8gInVsaW1pdCAtYyB1bmxpbWl0ZWQiID4+ICB+Ly5iYXNoX3Byb2ZpbGUKICBlY2hvICJ1bGltaXQgLXMgdW5saW1pdGVkIiA+PiAgfi8uYmFzaF9wcm9maWxlCiAgZWNobyAidWxpbWl0IC11IDIwNjc1NTQiID4+ICB+Ly5iYXNoX3Byb2ZpbGUKICBlY2hvICJ1bGltaXQgLW4gNTAwMDAwIiA+PiAgfi8uYmFzaF9wcm9maWxlCgoKZWNobyAnIwojIElkZW50aWZ5IGVsaWdpYmxlIFNDU0kgZGlza3MgYnkgdGhlIGFic2VuY2Ugb2YgYSBTV0FQIHBhcnRpdGlvbi4KIyBUaGUgb25seSBhdHRyaWJ1dGUgdGhhdCBzaG91bGQgcG9zc2libHkgYmUgY2hhbmdlZCBpcyBtYXhfc2VjdG9yc19rYiwKIyB1cCB0byBhIHZhbHVlIG9mIDgxOTIsIGRlcGVuZGluZyBvbiB3aGF0IHRoZSBTQ1NJIGRyaXZlciBhbmQgZGlza3Mgc3VwcG9ydC4KIwpBQ1RJT049PSJhZGR8Y2hhbmdlIiwgU1VCU1lTVEVNPT0iYmxvY2siLCBLRVJORUw9PSJzZCpbXjAtOV0iLCBQUk9HUkFNPSIvdXNyL2Jpbi9sc2JsayAtcm5vIEZTVFlQRSxNT1VOVFBPSU5ULE5BTUUgL2Rldi8layIsIFJFU1VMVCE9IipTV0FQKiIsIEFUVFJ7cXVldWUvc2NoZWR1bGVyfT0iZGVhZGxpbmUiLCBBVFRSe3F1ZXVlL25yX3JlcXVlc3RzfT0iMjU2IiwgQVRUUntkZXZpY2UvcXVldWVfZGVwdGh9PSIzMSIsIEFUVFJ7cXVldWUvbWF4X3NlY3RvcnNfa2J9PSI4MTkyIiwgQVRUUntxdWV1ZS9yZWFkX2FoZWFkX2tifT0iMCIsIEFUVFJ7cXVldWUvcnFfYWZmaW5pdHl9PSIyIgonID4gL2V0Yy91ZGV2L3J1bGVzLmQvOTktaWJtLXNwZWN0cnVtLXNjYWxlLnJ1bGVzCiMgUnVuIHRoaXMgdG8gbG9hZCB0aGUgcnVsZXMKdWRldmFkbSBjb250cm9sIC0tcmVsb2FkLXJ1bGVzICYmIHVkZXZhZG0gdHJpZ2dlcgoKCmZpCgpjZCAtCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyBPUyBQZXJmb3JtYW5jZSB0dW5pbmcgLSBFTkQKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgoKCgoKY3AgL2V0Yy9zc2gvc3NoZF9jb25maWcgL2V0Yy9zc2gvc3NoZF9jb25maWcuYmFja3VwCnNlZCAtaSAncy8jUGVybWl0Um9vdExvZ2luIHllcy9QZXJtaXRSb290TG9naW4geWVzL2cnIC9ldGMvc3NoL3NzaGRfY29uZmlnCiNzZXJ2aWNlIHNzaGQgcmVzdGFydAoKCm12IC9yb290Ly5zc2gvYXV0aG9yaXplZF9rZXlzIC9yb290Ly5zc2gvYXV0aG9yaXplZF9rZXlzLmJhY2t1cApjcCAvaG9tZS9vcGMvLnNzaC9hdXRob3JpemVkX2tleXMgL3Jvb3QvLnNzaC9hdXRob3JpemVkX2tleXMKCmNkIC9yb290Ly5zc2gvOyBjYXQgaWRfcnNhLnB1YiA+PiBhdXRob3JpemVkX2tleXMgOyBjZCAtIAoKc2Vjb25kTklDRG9tYWluTmFtZT0ke3RoaXNGUUROIyouKn0KZWNobyAiRG9pbmcgbnNsb29rdXAgZm9yIG5vZGVzIgpjdD0xCmlmIFsgJG5zZE5vZGVDb3VudCAtZ3QgMCBdOyB0aGVuCiAgICAgICAgd2hpbGUgWyAkY3QgLWxlICRuc2ROb2RlQ291bnQgXTsgZG8KICAgICAgICAgICAgICAgIG5zbGs9YG5zbG9va3VwICRuc2ROb2RlSG9zdG5hbWVQcmVmaXgke2N0fS4kc2Vjb25kTklDRG9tYWluTmFtZWAKICAgICAgICAgICAgICAgIG5zX2NrPWBlY2hvIC1lICQ/YAogICAgICAgICAgICAgICAgaWYgWyAkbnNfY2sgPSAwIF07IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaG5hbWU9YG5zbG9va3VwICRuc2ROb2RlSG9zdG5hbWVQcmVmaXgke2N0fS4kc2Vjb25kTklDRG9tYWluTmFtZSB8IGdyZXAgTmFtZSB8IGdhd2sgJ3twcmludCAkMn0nYAogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIkaG5hbWUiID4+IC90bXAvbnNkbm9kZWhvc3RzOwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIkaG5hbWUiID4+IC90bXAvYWxsbm9kZWhvc3RzOwogICAgICAgICAgICAgICAgICAgICAgICBjdD0kKChjdCsxKSk7CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICMgc2xlZXAgMTAgc2Vjb25kcyBhbmQgY2hlY2sgYWdhaW4gLSBpbmZpbml0ZSBsb29wCiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIlNsZWVwaW5nIGZvciAxMCBzZWNzIGFuZCB3aWxsIGNoZWNrIGFnYWluIGZvciBuc2xvb2t1cCAkbnNkTm9kZUhvc3RuYW1lUHJlZml4JHtjdH0uJHNlY29uZE5JQ0RvbWFpbk5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIHNsZWVwIDEwCiAgICAgICAgICAgICAgICBmaQogICAgICAgIGRvbmU7CiAgICAgICAgZWNobyAiRm91bmQgYGNhdCAvdG1wL25zZG5vZGVob3N0cyB8IHdjIC1sYCBub2RlcyI7CiAgICAgICAgZWNobyBgY2F0IC90bXAvbnNkbm9kZWhvc3RzYDsKZWxzZQogICAgICAgIGVjaG8gIm5vIHNlcnZlciBub2RlcyBjb25maWd1cmVkIgpmaQoKCmVjaG8gIkRvaW5nIG5zbG9va3VwIGZvciBub2RlcyIKY3Q9MTsKaWYgWyAkY2xpZW50Tm9kZUNvdW50IC1ndCAwIF07IHRoZW4KICAgICAgICB3aGlsZSBbICRjdCAtbGUgJGNsaWVudE5vZGVDb3VudCBdOyBkbwogICAgICAgICAgICAgICAgbnNsaz1gbnNsb29rdXAgJGNsaWVudE5vZGVIb3N0bmFtZVByZWZpeCRjdGAKICAgICAgICAgICAgICAgIG5zX2NrPWBlY2hvIC1lICQ/YAogICAgICAgICAgICAgICAgaWYgWyAkbnNfY2sgPSAwIF07IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaG5hbWU9YG5zbG9va3VwICRjbGllbnROb2RlSG9zdG5hbWVQcmVmaXgkY3QgfCBncmVwIE5hbWUgfCBnYXdrICd7cHJpbnQgJDJ9J2AKICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiJGhuYW1lIiA+PiAvdG1wL2NsaWVudG5vZGVob3N0czsKICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiJGhuYW1lIiA+PiAvdG1wL2FsbG5vZGVob3N0czsKICAgICAgICAgICAgICAgICAgICAgICAgY3Q9JCgoY3QrMSkpOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAjIHNsZWVwIDEwIHNlY29uZHMgYW5kIGNoZWNrIGFnYWluIC0gaW5maW5pdGUgbG9vcAogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICJTbGVlcGluZyBmb3IgMTAgc2VjcyBhbmQgd2lsbCBjaGVjayBhZ2FpbiBmb3IgbnNsb29rdXAgJGNsaWVudE5vZGVIb3N0bmFtZVByZWZpeCRjdCIKICAgICAgICAgICAgICAgICAgICAgICAgc2xlZXAgMTAKICAgICAgICAgICAgICAgIGZpCiAgICAgICAgZG9uZTsKICAgICAgICBlY2hvICJGb3VuZCBgY2F0IC90bXAvY2xpZW50bm9kZWhvc3RzIHwgd2MgLWxgIG5vZGVzIjsKICAgICAgICBlY2hvIGBjYXQgL3RtcC9jbGllbnRub2RlaG9zdHNgOwplbHNlCiAgICAgICAgZWNobyAibm8gY29tcHV0ZSBub2RlcyBjb25maWd1cmVkIgpmaQoKCgppZiBbICEgLWYgfi8uc3NoL2tub3duX2hvc3RzIF07IHRoZW4KICAgICAgICB0b3VjaCB+Ly5zc2gva25vd25faG9zdHMKZmkKCgoKCmVjaG8gIiR0aGlzSG9zdCIgfCBncmVwIC1xICRuc2ROb2RlSG9zdG5hbWVQcmVmaXgKaWYgWyAkPyAtZXEgMCBdIDsgdGhlbgoKICAjIFdhaXQgZm9yIG11bHRpLWF0dGFjaCBvZiB0aGUgQmxvY2sgdm9sdW1lcyB0byBjb21wbGV0ZS4gIE9ubHkgd2F5IHRvIGRvIHRoYXQgaXMgdmlhIE9DSSBDTEkgcHJldmlldyB0b29sIHZlcnNpb24gd2hpY2ggaXMgY2FsbGVkIGZyb20gVGVycmFmb3JtIHNjcmlwdHMuICBJdCB0aGVuIGNyZWF0ZXMgdGhlIGJlbG93IGZpbGUgb24gYWxsIG5vZGVzIG9mIHRoZSBjbHVzdGVyLgogIHdoaWxlIFsgISAtZiAvdG1wL211bHRpLWF0dGFjaC5jb21wbGV0ZSBdCiAgZG8KICAgIHNsZWVwIDYwcwogICAgZWNobyAiV2FpdGluZyBmb3IgbXVsdGktYXR0YWNoIHZpYSBvY2ktY2xpIHRvICBjb21wbGV0ZSAuLi4iCiAgZG9uZQpmaSAKCiMjIFN0YXJ0IFNTSEQgdG8gcHJldmVudCByZW1vdGUgZXhlY3V0aW9uIGR1cmluZyB0aGlzIHByb2Nlc3MKc3lzdGVtY3RsIHN0YXR1cyBzc2hkCnN5c3RlbWN0bCBzdG9wIHNzaGQKc3lzdGVtY3RsIHN0YXR1cyBzc2hkCgoKIyBSdW4gdGhlIGlzY3NpIGNvbW1hbmRzCiMgaXNjc2lhZG0gZGlzY292ZXJ5L2xvZ2luCiMgbG9vcCBvdmVyIHZhcmlvdXMgaXAncyBidXQgbmVlZHMgdG8gb25seSBhdHRlbXB0IGRpc2tzIHRoYXQgYWN0dWFsbHkKIyBkby93aWxsIGV4aXN0LgplY2hvICIkdGhpc0hvc3QiIHwgZ3JlcCAtcSAkbnNkTm9kZUhvc3RuYW1lUHJlZml4CmlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KCiAgICBpZiBbICRibG9ja1ZvbHVtZXNQZXJQb29sIC1ndCAwIF0gOwogICAgdGhlbgogICAgICBlY2hvICJOdW1iZXIgb2YgZGlza3MgOiAkYmxvY2tWb2x1bWVzUGVyUG9vbCIKICAgICAgZm9yIG4gaW4gYHNlcSAyICQoKGJsb2NrVm9sdW1lc1BlclBvb2wrMSkpYDsgZG8KICAgICAgICBlY2hvICJEaXNrICQoKG4tMikpLCBhdHRlbXB0aW5nIGlzY3NpIGRpc2NvdmVyeS9sb2dpbiBvZiAxNjkuMjU0LjIuJG4gLi4uIgogICAgICAgIHN1Y2Nlc3M9MQogICAgICAgIHdoaWxlIFtbICRzdWNjZXNzIC1lcSAxIF1dOyBkbwogICAgICAgICAgaXFuPSQoaXNjc2lhZG0gLW0gZGlzY292ZXJ5IC10IHNlbmR0YXJnZXRzIC1wIDE2OS4yNTQuMi4kbjozMjYwIHwgYXdrICd7cHJpbnQgJDJ9JykKICAgICAgICAgIGlmICBbWyAkaXFuICE9IGlxbi4qIF1dIDsKICAgICAgICAgIHRoZW4KICAgICAgICAgICAgZWNobyAiRXJyb3I6IHVuZXhwZWN0ZWQgaXFuIHZhbHVlOiAkaXFuIgogICAgICAgICAgICBzbGVlcCAxMHMKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAiU3VjY2VzcyBmb3IgaXFuOiAkaXFuIgogICAgICAgICAgICBzdWNjZXNzPTAKICAgICAgICAgIGZpCiAgICAgICAgZG9uZQogICAgICAgIGlzY3NpYWRtIC1tIG5vZGUgLW8gdXBkYXRlIC1UICRpcW4gLW4gbm9kZS5zdGFydHVwIC12IGF1dG9tYXRpYwogICAgICAgIGlzY3NpYWRtIC1tIG5vZGUgLVQgJGlxbiAtcCAxNjkuMjU0LjIuJG46MzI2MCAtbAogICAgICBkb25lCiAgICBlbHNlCiAgICAgIGVjaG8gIlplcm8gYmxvY2sgdm9sdW1lcywgbm90IGNhbGxpbmcgaXNjc2lhZG0sIFRvdGFsIERpc2sgQ291bnQ6ICRibG9ja1ZvbHVtZXNQZXJQb29sIgogICAgZmkKICAgICMgQ3JlYXRlIHRoaXMgZmlsZSBmb3IgVEYgc2NyaXB0IHRvIHByb2NlZWQgd2l0aCBuZXh0IHN0ZXBzCiAgICB0b3VjaCAvdG1wL211bHRpLWF0dGFjaC1pc2NzaS5jb21wbGV0ZQpmaQoKCgplY2hvICIkdGhpc0hvc3QiIHwgZ3JlcCAtcSAkbnNkTm9kZUhvc3RuYW1lUHJlZml4CmlmIFsgJD8gLWVxIDAgXSA7IHRoZW4KICAjIFJ1biBvbiBhbGwgc2VydmVyIG5vZGVzCiAgIyBUbyBlbmFibGUgY3VzdG9tIGRpc2sgY29uc2lzdGVudCBkZXZpY2VwYXRoIGRpc2NvdmVyeSBmb3IgbnNkcy4KICBta2RpciAtcCAvdmFyL21tZnMvZXRjLwogIGlmIFsgLWYgL3RtcC9uc2RkZXZpY2VzIF07IHRoZW4KICAgIGNwIC90bXAvbnNkZGV2aWNlcyAvdmFyL21tZnMvZXRjLwogICAgY2htb2QgK3ggL3Zhci9tbWZzL2V0Yy9uc2RkZXZpY2VzCiAgZWxzZSAKICAgIGV4aXQgMQogIGZpCmZpCgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyBkb3dubG9hZCBzcGVjdHJ1bSBzY2FsZSAjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwpjZCAvdG1wLwpjdXJsIC1PICRkb3dubG9hZFVybCAtcwoKIyBsb2dpYyB0byBlbnN1cmUgaWYgZG93bmxvYWQgZmFpbHMgZHVlIHRvIGludGVybWl0dGVudCBlcnJvciwgaXQgcmUtZG93bmxvYWRzLgp3aGlsZSBbICQ/IC1uZSAwIF07IGRvCiAgcm0gLXJmIC90bXAvU3BlY3RydW1fU2NhbGVfRGF0YV9NYW5hZ2VtZW50LSoKICBjdXJsIC1PICRkb3dubG9hZFVybCAtcwpkb25lCgp3aGlsZSBbICEgLWYgL3RtcC9TcGVjdHJ1bV9TY2FsZV9EYXRhX01hbmFnZW1lbnQtJHt2ZXJzaW9ufS14ODZfNjQtTGludXgtaW5zdGFsbCBdOwpkbwogIHNsZWVwIDVzCiAgZWNobyAiV2FpdGluZyBmb3IgZmlsZSB0byBkb3dubG9hZCIKZG9uZQoKCmNobW9kICt4IFNwZWN0cnVtX1NjYWxlX0RhdGFfTWFuYWdlbWVudC0ke3ZlcnNpb259LXg4Nl82NC1MaW51eC1pbnN0YWxsCi4vU3BlY3RydW1fU2NhbGVfRGF0YV9NYW5hZ2VtZW50LSR7dmVyc2lvbn0teDg2XzY0LUxpbnV4LWluc3RhbGwgLS1zaWxlbnQKCmVjaG8gIiR2ZXJzaW9uIiA+IC9ldGMveXVtL3ZhcnMvc3BlY19zY2FsZV92ZXIKCmVjaG8gJ1tzcGVjdHJ1bV9zY2FsZS1ncGZzXQpuYW1lID0gU3BlY3RydW0gU2NhbGUgLSBHUEZTCmJhc2V1cmwgPSBmaWxlOi8vL3Vzci9scHAvbW1mcy8kc3BlY19zY2FsZV92ZXIvZ3Bmc19ycG1zCmdwZ2NoZWNrPTAKZW5hYmxlZD0xCltzcGVjdHJ1bV9zY2FsZS1ncGZzLW9wdGlvbmFsXQpuYW1lID0gU3BlY3RydW0gU2NhbGUgLSBHUEZTCmJhc2V1cmwgPSBmaWxlOi8vL3Vzci9scHAvbW1mcy8kc3BlY19zY2FsZV92ZXIvZ3Bmc19ycG1zL3JoZWw3CmdwZ2NoZWNrPTAKZW5hYmxlZD0xCltzcGVjdHJ1bV9zY2FsZS1nYW5lc2hhXQpuYW1lID0gU3BlY3RydW0gU2NhbGUgLSBORlMtR2FuZXNoYQpiYXNldXJsID0gZmlsZTovLy91c3IvbHBwL21tZnMvJHNwZWNfc2NhbGVfdmVyL2dhbmVzaGFfcnBtcy9yaGVsNwpncGdjaGVjaz0wCmVuYWJsZWQ9MQpbc3BlY3RydW1fc2NhbGUtc21iXQpuYW1lID0gU3BlY3RydW0gU2NhbGUgLSBTTUIKYmFzZXVybCA9IGZpbGU6Ly8vdXNyL2xwcC9tbWZzLyRzcGVjX3NjYWxlX3Zlci9zbWJfcnBtcy9yaGVsNwpncGdjaGVjaz0wCmVuYWJsZWQ9MQpbc3BlY3RydW1fc2NhbGUtb2JqZWN0XQpuYW1lID0gU3BlY3RydW0gU2NhbGUgLSBPYmplY3QKYmFzZXVybCA9IGZpbGU6Ly8vdXNyL2xwcC9tbWZzLyRzcGVjX3NjYWxlX3Zlci9vYmplY3RfcnBtcy9yaGVsNwpncGdjaGVjaz0wCmVuYWJsZWQ9MQpbc3BlY3RydW1fc2NhbGUtemltb25dCm5hbWUgPSBTcGVjdHJ1bSBTY2FsZSAtIFppbW9uCmJhc2V1cmwgPSBmaWxlOi8vL3Vzci9scHAvbW1mcy8kc3BlY19zY2FsZV92ZXIvemltb25fcnBtcy9yaGVsNwpncGdjaGVjaz0wCmVuYWJsZWQ9MScgPiAvZXRjL3l1bS5yZXBvcy5kL3NwZWN0cnVtLXNjYWxlLnJlcG8KCgp5dW0gY2xlYW4gYWxsCnl1bSBtYWtlY2FjaGUKeXVtIC15IGluc3RhbGwga2VybmVsLWRldmVsIGNwcCBnY2MgZ2NjLWMrKyBiaW51dGlscyBrZXJuZWwtaGVhZGVycwojIFVzZSB1bmFtZSAtYSB0byBnZXQga2VybmVsIHZlcnNpb24gYW5kIHRoZW4gbWFrZSBzdXJlIGJvdGgKI2tlcm5lbC1kZXZlbCBhbmQga2VybmVsLWhlYWRlcnMgaGF2ZSBzYW1lIHZlcnNpb24KeXVtIC15IGluc3RhbGwgcHNtaXNjIG51bWFkIG51bWFjdGwgaXBlcmYzIGRzdGF0IGlwcm91dGUgYXV0b21ha2UgYXV0b2NvbmYgZ2l0CgojIHl1bSAteSB1cGRhdGUKCiMgRm9yIEdVSSBub2RlOgojeXVtIC15IGluc3RhbGwgZ3Bmcy5iYXNlIGdwZnMuZ3BsIGdwZnMubXNnLmVuX1VTIGdwZnMuZ3NraXQgZ3Bmcy5saWNlbnNlKiBncGZzLmV4dCBncGZzLmNyeXB0byBncGZzLmNvbXByZXNzaW9uIGdwZnMuYWR2IGdwZnMuZ3NzLnBtc2Vuc29ycyBncGZzLmRvY3MgZ3Bmcy5qYXZhIGdwZnMua2Fma2EgZ3Bmcy5saWJyZGthZmthIGdwZnMuZ3VpIGdwZnMuZ3NzLnBtY29sbGVjdG9yCgojIEZvciBub24tR1VJIG5vZGU6Cnl1bSAteSBpbnN0YWxsIGdwZnMuYmFzZSBncGZzLmdwbCBncGZzLm1zZy5lbl9VUyBncGZzLmdza2l0IGdwZnMubGljZW5zZSogZ3Bmcy5leHQgZ3Bmcy5jcnlwdG8gZ3Bmcy5jb21wcmVzc2lvbiBncGZzLmFkdiBncGZzLmdzcy5wbXNlbnNvcnMgZ3Bmcy5kb2NzIGdwZnMuamF2YSBncGZzLmthZmthIGdwZnMubGlicmRrYWZrYQoKc2VkIC1pICcvZGlzdHJvdmVycGtnL2EgZXhjbHVkZT1rZXJuZWwqJyAvZXRjL3l1bS5jb25mCgoKZWNobyAiY2xvdWQtaW5pdCBjb21wbGV0ZSIKdG91Y2ggL3RtcC9jbG91ZF9pbml0LmNvbXBsZXRlCgpyZWJvb3QKCgo="
        }
      [33m~[0m [0m[1m[0mprivate_ip[0m[0m                          = "10.0.3.4" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mpublic_ip[0m[0m                           = (known after apply)
      [33m~[0m [0m[1m[0mregion[0m[0m                              = "phx" [33m->[0m [0m(known after apply)
        [1m[0mshape[0m[0m                               = "BM.DenseIO2.52"
      [33m~[0m [0m[1m[0mstate[0m[0m                               = "RUNNING" [33m->[0m [0m(known after apply)
        [1m[0msubnet_id[0m[0m                           = "ocid1.subnet.oc1.phx.aaaaaaaaijglqbq2fhov5mdtkzupzha6agv3unoayq6rwsn3pezaqcll6hoq"
      [33m~[0m [0m[1m[0mtime_created[0m[0m                        = "2019-09-17 00:13:24.618 +0000 UTC" [33m->[0m [0m(known after apply)
      [32m+[0m [0m[1m[0mtime_maintenance_reboot_due[0m[0m         = (known after apply)

      [33m~[0m [0magent_config {
          [33m~[0m [0m[1m[0mis_monitoring_disabled[0m[0m = false [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0mcreate_vnic_details {
          [33m~[0m [0m[1m[0massign_public_ip[0m[0m       = "false" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mdisplay_name[0m[0m           = "ss-server-nic0-4" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mhostname_label[0m[0m         = "ss-server-nic0-4" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mnsg_ids[0m[0m                = [] [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.3.4" [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0mskip_source_dest_check[0m[0m = false [33m->[0m [0m(known after apply)
          [33m~[0m [0m[1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaaijglqbq2fhov5mdtkzupzha6agv3unoayq6rwsn3pezaqcll6hoq" [33m->[0m [0m(known after apply)
        }

      [33m~[0m [0msource_details {
          [33m~[0m [0m[1m[0mboot_volume_size_in_gbs[0m[0m = "47" [33m->[0m [0m(known after apply)
          [32m+[0m [0m[1m[0mkms_key_id[0m[0m              = (known after apply)
            [1m[0msource_id[0m[0m               = "ocid1.image.oc1.phx.aaaaaaaavzt7r56xh2lj2w7ibqbkvumxbqr2z2jswoma3qjbunu7wj63rigq"
            [1m[0msource_type[0m[0m             = "image"
        }

        timeouts {
            [1m[0mcreate[0m[0m = "120m"
        }
    }

[1m  # oci_core_security_list.private_security_list[0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_security_list" "private_security_list" {
        [1m[0mcompartment_id[0m[0m = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m   = {}
        [1m[0mdisplay_name[0m[0m   = "Private"
        [1m[0mfreeform_tags[0m[0m  = {}
        [1m[0mid[0m[0m             = "ocid1.securitylist.oc1.phx.aaaaaaaa2itrty7dvlalsatzg7bht6o3mylnjo44c7xlscghrxd53qhbp6jq"
        [1m[0mstate[0m[0m          = "AVAILABLE"
        [1m[0mtime_created[0m[0m   = "2019-09-17 00:08:08.615 +0000 UTC"
        [1m[0mvcn_id[0m[0m         = "ocid1.vcn.oc1.phx.aaaaaaaa6ws4cf2oc7f5yp5hqb333co33mpxv2wzim2ddk5gckgmralvgzla"

        egress_security_rules {
            [1m[0mdestination[0m[0m      = "0.0.0.0/0"
            [1m[0mdestination_type[0m[0m = "CIDR_BLOCK"
            [1m[0mprotocol[0m[0m         = "all"
            [1m[0mstateless[0m[0m        = false
        }
        egress_security_rules {
            [1m[0mdestination[0m[0m      = "10.0.0.0/16"
            [1m[0mdestination_type[0m[0m = "CIDR_BLOCK"
            [1m[0mprotocol[0m[0m         = "all"
            [1m[0mstateless[0m[0m        = false
        }

        ingress_security_rules {
            [1m[0mprotocol[0m[0m    = "6"
            [1m[0msource[0m[0m      = "10.0.0.0/16"
            [1m[0msource_type[0m[0m = "CIDR_BLOCK"
            [1m[0mstateless[0m[0m   = false

            tcp_options {
                [1m[0mmax[0m[0m = 22
                [1m[0mmin[0m[0m = 22
            }
        }
        ingress_security_rules {
            [1m[0mprotocol[0m[0m    = "6"
            [1m[0msource[0m[0m      = "10.0.0.0/16"
            [1m[0msource_type[0m[0m = "CIDR_BLOCK"
            [1m[0mstateless[0m[0m   = false

            tcp_options {
                [1m[0mmax[0m[0m = 443
                [1m[0mmin[0m[0m = 443
            }
        }
        ingress_security_rules {
            [1m[0mprotocol[0m[0m    = "6"
            [1m[0msource[0m[0m      = "10.0.0.0/16"
            [1m[0msource_type[0m[0m = "CIDR_BLOCK"
            [1m[0mstateless[0m[0m   = false

            tcp_options {
                [1m[0mmax[0m[0m = 80
                [1m[0mmin[0m[0m = 80
            }
        }
      [32m+[0m [0mingress_security_rules {
          [32m+[0m [0m[1m[0mprotocol[0m[0m    = "All"
          [32m+[0m [0m[1m[0msource[0m[0m      = "10.0.0.0/16"
          [32m+[0m [0m[1m[0msource_type[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mstateless[0m[0m   = false
        }
      [31m-[0m [0mingress_security_rules {
          [31m-[0m [0m[1m[0mprotocol[0m[0m    = "all" [90m->[0m [0m[90mnull[0m[0m
          [31m-[0m [0m[1m[0msource[0m[0m      = "10.0.0.0/16" [90m->[0m [0m[90mnull[0m[0m
          [31m-[0m [0m[1m[0msource_type[0m[0m = "CIDR_BLOCK" [90m->[0m [0m[90mnull[0m[0m
          [31m-[0m [0m[1m[0mstateless[0m[0m   = false [90m->[0m [0m[90mnull[0m[0m
        }
    }

[1m  # oci_core_vnic_attachment.secondary_vnic_attachment[0][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_vnic_attachment" "secondary_vnic_attachment" {
      [33m~[0m [0m[1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q" [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m        = "SecondaryVNIC"
      [33m~[0m [0m[1m[0mid[0m[0m                  = "ocid1.vnicattachment.oc1.phx.abyhqljt65vz3mo33cemphkf4idasjvclskk5l55osnbxk6hz2kpccm2axka" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0minstance_id[0m[0m         = "ocid1.instance.oc1.phx.abyhqljtilwqmibvupgziq2lmlwpg2igq3pd3t44d7z5lmrx77wx55ttpgqq" [33m->[0m [0m(known after apply) [31m# forces replacement[0m[0m
        [1m[0mnic_index[0m[0m           = 1
      [33m~[0m [0m[1m[0mstate[0m[0m               = "ATTACHED" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0msubnet_id[0m[0m           = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mtime_created[0m[0m        = "2019-09-17 00:19:10.86 +0000 UTC" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mvlan_tag[0m[0m            = 0 [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mvnic_id[0m[0m             = "ocid1.vnic.oc1.phx.abyhqljtlzttlbdffpuzrons5tzzfzz4k2sdniwig4obivxsh4w5sbwl2yca" [33m->[0m [0m(known after apply)

      [33m~[0m [0mcreate_vnic_details {
            [1m[0massign_public_ip[0m[0m       = "false"
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
            [1m[0mdisplay_name[0m[0m           = "ss-server-1"
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
            [1m[0mhostname_label[0m[0m         = "ss-server-1"
          [31m-[0m [0m[1m[0mnsg_ids[0m[0m                = [] [90m->[0m [0m[90mnull[0m[0m
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.6.6" [33m->[0m [0m(known after apply)
            [1m[0mskip_source_dest_check[0m[0m = false
            [1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q"
        }
    }

[1m  # oci_core_vnic_attachment.secondary_vnic_attachment[1][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_vnic_attachment" "secondary_vnic_attachment" {
      [33m~[0m [0m[1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q" [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m        = "SecondaryVNIC"
      [33m~[0m [0m[1m[0mid[0m[0m                  = "ocid1.vnicattachment.oc1.phx.abyhqljtvrvz4pgg3jyfx42yy3xjjshustwslfc23xmfjytd2uaitp7fexla" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0minstance_id[0m[0m         = "ocid1.instance.oc1.phx.abyhqljtkvqhtcd2qyx6mrdsv3jqkoxdzpyo53b7upqpfd7ywbudr7jg72na" [33m->[0m [0m(known after apply) [31m# forces replacement[0m[0m
        [1m[0mnic_index[0m[0m           = 1
      [33m~[0m [0m[1m[0mstate[0m[0m               = "ATTACHED" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0msubnet_id[0m[0m           = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mtime_created[0m[0m        = "2019-09-17 00:21:46.229 +0000 UTC" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mvlan_tag[0m[0m            = 0 [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mvnic_id[0m[0m             = "ocid1.vnic.oc1.phx.abyhqljt5pdjohiwq4j2kwuzn4rizzakamp6z5a5ao277l5bql4prz355ywq" [33m->[0m [0m(known after apply)

      [33m~[0m [0mcreate_vnic_details {
            [1m[0massign_public_ip[0m[0m       = "false"
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
            [1m[0mdisplay_name[0m[0m           = "ss-server-2"
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
            [1m[0mhostname_label[0m[0m         = "ss-server-2"
          [31m-[0m [0m[1m[0mnsg_ids[0m[0m                = [] [90m->[0m [0m[90mnull[0m[0m
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.6.9" [33m->[0m [0m(known after apply)
            [1m[0mskip_source_dest_check[0m[0m = false
            [1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q"
        }
    }

[1m  # oci_core_vnic_attachment.secondary_vnic_attachment[2][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_vnic_attachment" "secondary_vnic_attachment" {
      [33m~[0m [0m[1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q" [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m        = "SecondaryVNIC"
      [33m~[0m [0m[1m[0mid[0m[0m                  = "ocid1.vnicattachment.oc1.phx.abyhqljtmtfqr77swt32dkw2jqbnxkgtygiia4xja65epkdxomo7zb5vud7q" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0minstance_id[0m[0m         = "ocid1.instance.oc1.phx.abyhqljtgjug2374vw2tqk3gymi5bxo6tcu34ibtdg3soizikt6wv7d3uwmq" [33m->[0m [0m(known after apply) [31m# forces replacement[0m[0m
        [1m[0mnic_index[0m[0m           = 1
      [33m~[0m [0m[1m[0mstate[0m[0m               = "ATTACHED" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0msubnet_id[0m[0m           = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mtime_created[0m[0m        = "2019-09-17 00:21:06.985 +0000 UTC" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mvlan_tag[0m[0m            = 0 [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mvnic_id[0m[0m             = "ocid1.vnic.oc1.phx.abyhqljtfhlsvsjhnhugigb5pe4wbht4lktpigfefuhcdzfrz37cnosqectq" [33m->[0m [0m(known after apply)

      [33m~[0m [0mcreate_vnic_details {
            [1m[0massign_public_ip[0m[0m       = "false"
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
            [1m[0mdisplay_name[0m[0m           = "ss-server-3"
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
            [1m[0mhostname_label[0m[0m         = "ss-server-3"
          [31m-[0m [0m[1m[0mnsg_ids[0m[0m                = [] [90m->[0m [0m[90mnull[0m[0m
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.6.8" [33m->[0m [0m(known after apply)
            [1m[0mskip_source_dest_check[0m[0m = false
            [1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q"
        }
    }

[1m  # oci_core_vnic_attachment.secondary_vnic_attachment[3][0m must be [1m[31mreplaced[0m[0m
[0m[31m-[0m/[32m+[0m [0mresource "oci_core_vnic_attachment" "secondary_vnic_attachment" {
      [33m~[0m [0m[1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q" [33m->[0m [0m(known after apply)
        [1m[0mdisplay_name[0m[0m        = "SecondaryVNIC"
      [33m~[0m [0m[1m[0mid[0m[0m                  = "ocid1.vnicattachment.oc1.phx.abyhqljtktiz3iwrciluk4qkan3mg6ihqi2hoiidutfljorjufkbqllmqtfq" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0minstance_id[0m[0m         = "ocid1.instance.oc1.phx.abyhqljtvkytwjrxgws3hgkq2yb2ybaoiwsnmopw2zys62n42vcxnibupnva" [33m->[0m [0m(known after apply) [31m# forces replacement[0m[0m
        [1m[0mnic_index[0m[0m           = 1
      [33m~[0m [0m[1m[0mstate[0m[0m               = "ATTACHED" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0msubnet_id[0m[0m           = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mtime_created[0m[0m        = "2019-09-17 00:20:42.156 +0000 UTC" [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mvlan_tag[0m[0m            = 0 [33m->[0m [0m(known after apply)
      [33m~[0m [0m[1m[0mvnic_id[0m[0m             = "ocid1.vnic.oc1.phx.abyhqljtgnywbf64l3mp344xem54ja2rpweensxeflyt4poxa67pr7d2nhza" [33m->[0m [0m(known after apply)

      [33m~[0m [0mcreate_vnic_details {
            [1m[0massign_public_ip[0m[0m       = "false"
          [33m~[0m [0m[1m[0mdefined_tags[0m[0m           = {} [33m->[0m [0m(known after apply)
            [1m[0mdisplay_name[0m[0m           = "ss-server-4"
          [33m~[0m [0m[1m[0mfreeform_tags[0m[0m          = {} [33m->[0m [0m(known after apply)
            [1m[0mhostname_label[0m[0m         = "ss-server-4"
          [31m-[0m [0m[1m[0mnsg_ids[0m[0m                = [] [90m->[0m [0m[90mnull[0m[0m
          [33m~[0m [0m[1m[0mprivate_ip[0m[0m             = "10.0.6.7" [33m->[0m [0m(known after apply)
            [1m[0mskip_source_dest_check[0m[0m = false
            [1m[0msubnet_id[0m[0m              = "ocid1.subnet.oc1.phx.aaaaaaaauvz5336pkvkyddbdkeogxea5hasnc4svrox3f2vys4czwtk7nt3q"
        }
    }

[1m  # oci_core_volume.shared_data_block_volume[0][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData1"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt7lxjmeui3oidrahg2dgipka6z7b4sujuui37jfzkkzcqp6pmdj7q"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:02:59.028 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[1][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData2"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtpqjenfowoccym6lm666fzxrkqdfpon3jfvkzehp4hsdyhy47ghsq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:01:09.779 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[2][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData3"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljti7hcqchejkfcr7j3wtx2j7vc2cmydxmdtstcse6tnizdmqkqlk3q"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:07:01.095 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[3][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData4"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtywmtw7j4hujxzl4ympwdw5jf4aoqeksffyajwif4bsu2doyqyawq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:01:25.525 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[4][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData5"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt7c6xpxyrrsqjlooixi4aat3oubkovqww7frtbhxa3dxj5q3poruq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:08:20.4 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[5][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData6"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtznbojh3tsanndpclt5ur7tb5kn2zanbivndgksibmnx5wthxbssa"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:02:26.381 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[6][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData7"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtuau5wubbqivzag2juncaqccxekzajjzi2gpunbij7xy577miigwa"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:00:32.982 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[7][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData8"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtbei6g4ec2yn7bf6gth2mtibz7tc4v3ts2ssnhh54o4mcx3k3rsbq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-16 23:59:55.012 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[8][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData9"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt7hfkxnfmdsau7wyy2545b5nel6bfvg3xeplzdmrmlgigrsyfv4ja"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:07:23.611 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[9][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData10"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt4au6egwysi4hiwz63vg64h2gd5zyi2nf7u3degyvdbfg5dtpmisq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:00:18.884 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[10][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData11"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt5jf7apk77lto7ufoc4upp42m35yayfcgvycm3kym7rsvzmvybbdq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:00:32.45 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[11][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData12"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtf7xenv2333tfgkvmnx6ucknx3cj5e3qti35xgiwbbyn3y5cfywyq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:01:55.106 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[12][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData13"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt72viotwctw4fw2zj5bn3tbhdnepibanehcwc3e5hvprgnbtxit2q"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:02:02.729 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[13][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData14"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtw4trdn7bylj2gjfnnomn23jlnulbbuatsq5vh7zeeecj6gxow6ra"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:04:40.809 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[14][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData15"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtaywm5vquzp5iwvhzfpg7hqi7s545iqygt7gguxsljbcmllshwica"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:00:46.033 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[15][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData16"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtq6iy7rj6jx2zuh3i3stxbecmv3g7nctplxsi27bohiqa7tyzyewq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:07:44.1 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[16][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData17"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt3x5d5k5e32dfamlojccvfmydjqsxiq4vir2kksbr4oi456cmw34a"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:06:37.364 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[17][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData18"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt27int4p4c7rekw63qzmdt3v57xeid3ldkegdvpxd4sy4is5jj6fq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:06:23.804 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[18][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData19"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtw3ehqobmywjlrnacuffsaeu7opbdkdmi5zr544muzuurtt6pitzq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:04:10.344 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[19][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData20"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtvx7nr36fzyfhsjujuxjm2xk6vvsw6zffp3s44x7bkqnbv5aoanda"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:02:20.093 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[20][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData21"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt34mdz5yc7hwlffrzmpsqedsrcyc5c436lk5vu6b5oig35udpa36a"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:05:22.966 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[21][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData22"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljti3hingh3u2x5hvwtymcl5gikl4nrjsvjax5fjf2wpbwn2tmrgojq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:01:20.518 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[22][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData23"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtyrus5dzr3wbnc2fr33ms3xnpihme236qtjwdnzbqnaznotsc7zja"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:06:47.563 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[23][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData24"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljttdvf2fjxrvvvd3cpxbp2oixafj7vqb57jr23q77gk5b5fam5wkca"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:06:23.953 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[24][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData25"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtr6oxpiflr22fqga57tiwbalndsr7j6swxn6oxy2elhzema3cifta"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:05:46.671 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[25][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData26"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtyarpvzuurgopvx35edpeslnzuyvntqrwrhhw7e2c6dhxtuuegrwq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:01:39.028 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[26][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData27"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt6yfk46spbqzzcyvbscfi5i7wbo4zngcxc3z3xuzhsixuie36pg3a"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:06:13.655 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[27][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData28"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljthwcnnnlvm365gt7yj2mubg4e7imeydb7lrxwrgjl2kjf36zrilva"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:04:33.934 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[28][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData29"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljta6sf3xnkxoptite7d4kn3ehg2ft4cac4yh3hmh2jhdudvkkcp3va"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:02:43.782 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[29][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData30"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtvoufhgoh35nmh3vfjhixywjelww72y66cl6f5ii6os7uqecbeifq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:07:37.159 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[30][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData31"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtt5z5qja75j3245v7wktin2ohexoj7upsu2sbj4ujq473j74kdtva"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:07:30.538 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[31][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData32"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtxi6paynsj4676tdkh6uzv3vln7vp4hzkaxbairpxpyves5vee62a"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:06:10.417 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[32][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData33"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtm3zidptqlrdkyrgbr3gi6y3k5pkvlqyp27lgriibsgwhd3ksqhja"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:03:46.533 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[33][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData34"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtzd46bzherdb5w42qooun3sv43r4aktrhxjkgoggyxxv3xtgm3lga"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:00:18.992 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[34][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData35"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtpa3vg2iqlmawajs5umhoebptgb2g6dfcuyuhrj33d2i3gxxb4rta"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:05:34.511 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[35][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData36"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtpcknw3hul42rjjyiyu2nrknby2o2j24nc6elq67ubwmj6l5erb7q"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:01:44.289 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[36][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData37"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtxntuwu7hnfnxefygakbxilu6wpmuuh5kcijb5pfnzdgiirazy7oq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:06:00.147 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[37][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData38"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljteintmejbsdstrtionkuyiqjmww2gpuctjd2njfnqoxknw46od2yq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:00:56.699 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[38][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData39"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtppbr354k6s62n4cf2rvxmrlkoasjszp5qtgxn4hyre2moyakhl4q"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:05:48.655 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[39][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData40"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt3v4bnedz7cc53rod7xhyxugxnuvhxjwpy66eaxawladqhedbtexa"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:08:01.589 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[40][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData41"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtur35xfp5cel343wrid6bsivbzyjvqfnoq3grknhhzychauahrxsq"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-16 23:59:55.238 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[41][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData42"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljtcgrhltkiakcktckydv6yvta2ha6fac3oyb3qiyprpmcwry7sz4xa"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:03:22.818 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[42][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData43"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljttpv24fcf2ip3hyylsuadqt4dqpv25aflt2zdmi3hvza5rs2zsq7q"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:04:59.092 +0000 UTC"
    }

[1m  # oci_core_volume.shared_data_block_volume[43][0m will be updated in-place[0m[0m
[0m[33m  ~[0m [0mresource "oci_core_volume" "shared_data_block_volume" {
        [1m[0mavailability_domain[0m[0m = "vemA:PHX-AD-3"
        [1m[0mcompartment_id[0m[0m      = "ocid1.compartment.oc1..aaaaaaaagqbj6i2pjvweeylweaungv2mjqffte5eenkhkbtpkpffyoedqn4q"
        [1m[0mdefined_tags[0m[0m        = {}
        [1m[0mdisplay_name[0m[0m        = "SharedData44"
        [1m[0mfreeform_tags[0m[0m       = {}
        [1m[0mid[0m[0m                  = "ocid1.volume.oc1.phx.abyhqljt5efigzw5zsnn5vituhno4tqtclqjyiokfjzpc2w26obqfrj3ie3a"
        [1m[0mis_hydrated[0m[0m         = true
      [33m~[0m [0m[1m[0msize_in_gbs[0m[0m         = "1100" [33m->[0m [0m"800"
        [1m[0msize_in_mbs[0m[0m         = "1126400"
        [1m[0mstate[0m[0m               = "AVAILABLE"
        [1m[0mtime_created[0m[0m        = "2019-09-17 00:01:31.257 +0000 UTC"
    }

[0m[1mPlan:[0m 14 to add, 45 to change, 13 to destroy.[0m

[0m[1mDo you want to perform these actions?[0m
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  [1mEnter a value:[0m [0m
